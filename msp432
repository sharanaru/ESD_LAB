/* --COPYRIGHT--,BSD_EX
 * Copyright (c) 2014, Texas Instruments Incorporated
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 *
 * *  Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 *
 * *  Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 *
 * *  Neither the name of Texas Instruments Incorporated nor the names of
 *    its contributors may be used to endorse or promote products derived
 *    from this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO,
 * THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
 * PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR
 * CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
 * EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
 * PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS;
 * OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
 * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR
 * OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
 * EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 *
 *******************************************************************************
 *
 *                       MSP432 CODE EXAMPLE DISCLAIMER
 *
 * MSP432 code examples are self-contained low-level programs that typically
 * demonstrate a single peripheral function or device feature in a highly
 * concise manner. For this the code may rely on the device's power-on default
 * register values and settings such as the clock configuration and care must
 * be taken when combining code from several examples to avoid potential side
 * effects. Also see http://www.ti.com/tool/mspdriverlib for an API functional
 * library & https://dev.ti.com/pinmux/ for a GUI approach to peripheral configuration.
 *
 * --/COPYRIGHT--*/
//******************************************************************************
//   MSP432P401 Demo - eUSCI_A0 UART echo at 9600 baud using BRCLK = 12MHz
//
//  Description: This demo echoes back characters received via a PC serial port.
//  SMCLK/ DCO is used as a clock source and the device is put in LPM0
//  The auto-clock enable feature is used by the eUSCI and SMCLK is turned off
//  when the UART is idle and turned on when a receive edge is detected.
//  Note that level shifter hardware is needed to shift between RS232 and MSP
//  voltage levels.
//
//  The example code shows proper initialization of registers
//  and interrupts to receive and transmit data.
//
//                MSP432P401
//             -----------------
//         /|\|                 |
//          | |                 |
//          --|RST              |
//            |                 |
//            |                 |
//            |     P1.3/UCA0TXD|----> PC (echo)
//            |     P1.2/UCA0RXD|<---- PC
//            |                 |
//
//   William Goh
//   Texas Instruments Inc.
//   June 2016 (updated) | June 2014 (created)
//   Built with CCSv6.1, IAR, Keil, GCC
//******************************************************************************
#include "msp.h"
#include <stdint.h>
#include <stdio.h>
#define basev 65500
float duty_cycle;
int ledstatus=0; int pflag=0;
void uartinit()
{
    CS->KEY = CS_KEY_VAL;                   // Unlock CS module for register access
    CS->CTL0 = 0;                           // Reset tuning parameters
    CS->CTL0 = CS_CTL0_DCORSEL_3;           // Set DCO to 12MHz (nominal, center of 8-16MHz range)
    CS->CTL1 =  CS_CTL1_SELS_3;             // Select ACLK = REFO
    CS->KEY = 0;                                         // SMCLK = DCO                 // MCLK = DCO
    // Lock CS module from unintended accesses

    // Configure UART pins
    P1->SEL0 |= BIT2 | BIT3;                // set 2-UART pin as secondary function

    // Configure UART
    EUSCI_A0->CTLW0 |= EUSCI_A_CTLW0_SWRST; // Put eUSCI in reset
    EUSCI_A0->CTLW0 = EUSCI_A_CTLW0_SWRST | // Remain eUSCI in reset
            EUSCI_A_CTLW0_SSEL__SMCLK;      // Configure eUSCI clock source for SMCLK
    // Baud Rate calculation
    // 24000000/(16*9600) = 26.04166
    // Fractional portion = .04166
    // User's Guide Table 21-4: UCBRSx = 0x10
    // UCBRFx = int ( (78.125-78)*16) = 2
    EUSCI_A0->BRW = 6;                     // baud rate at 115200
    EUSCI_A0->MCTLW = (8<< EUSCI_A_MCTLW_BRF_OFS) |(0x20<<EUSCI_A_MCTLW_BRS_OFS)|EUSCI_A_MCTLW_OS16;

    EUSCI_A0->CTLW0 &= ~EUSCI_A_CTLW0_SWRST; // Initialize eUSCI
    EUSCI_A0->IFG &= ~EUSCI_A_IFG_RXIFG;    // Clear eUSCI RX interrupt flag
    EUSCI_A0->IE |= EUSCI_A_IE_RXIE;        // Enable USCI_A0 RX interrupt
}

void timerinit()
{

    TIMER_A0->CCTL[0] &= ~TIMER_A_CCTLN_CCIFG;TIMER_A0->CCTL[1] &= ~TIMER_A_CCTLN_CCIFG;
    TIMER_A0->CCTL[0] |= TIMER_A_CCTLN_CCIE|TIMER_A_CCTLN_OUTMOD_3; // TACCR0 interrupt enabled
    TIMER_A0->CCTL[1] |= TIMER_A_CCTLN_CCIE|TIMER_A_CCTLN_OUTMOD_3;
    TIMER_A0->CCR[0] = basev; duty_cycle=0.944;
    float duty=duty_cycle*basev;
    TIMER_A0->CCR[1] =(uint16_t) duty;
    TIMER_A0->CTL = TIMER_A_CTL_SSEL__SMCLK |TIMER_A_CTL_MC__UP  ;



    P1->DIR |= BIT0;
    P1->OUT &= ~BIT0;



}
int main(void)
{

    WDT_A->CTL = WDT_A_CTL_PW | WDT_A_CTL_HOLD;            // Stop watchdog timer
    uartinit(); // baud rate at 115200 ; sm clock reconfigured to 12 MHz.
    timerinit();
    P1->DIR &= ~BIT1;
    P1->OUT |= BIT1;
    P1->REN |= BIT1;// Enable global interrupt
    P1->IES |= BIT1;                         // Interrupt on high-to-low transition
                                // Clear all P1 interrupt flags
    P1->IE |= BIT1;
    P1->DIR &= ~BIT4;
        P1->OUT |= BIT4;
        P1->REN |= BIT4;// Enable global interrupt
        P1->IES |= BIT4;                         // Interrupt on high-to-low transition
        P1->IFG &= 0;                            // Clear all P1 interrupt flags
        P1->IE |= BIT4;
    __enable_irq();
    // Enable eUSCIA0 interrupt in NVIC module
    NVIC->ISER[0] |= 1 << ((EUSCIA0_IRQn) & 31);
    NVIC->ISER[0] |= 1 << ((TA0_0_IRQn) & 31);
    NVIC->ISER[0] |= 1 << ((TA0_N_IRQn) & 31);
    NVIC->ISER[1] |= 1 << ((PORT1_IRQn) & 31);

    while(1)    // Enable sleep on exit from ISR
        __no_operation();                       // For debugger
}

// UART interrupt service routine
void EUSCIA0_IRQHandler(void)
{
    if (EUSCI_A0->IFG & EUSCI_A_IFG_RXIFG)
    {
        // Check if the TX buffer is empty first
        while(!(EUSCI_A0->IFG & EUSCI_A_IFG_TXIFG));
        // Echo the received character back
        EUSCI_A0->TXBUF = EUSCI_A0->RXBUF;
        if(EUSCI_A0->RXBUF=='\r')
            EUSCI_A0->TXBUF ='\n';

    }
}

void TA0_0_IRQHandler(void)
{

    TIMER_A0->CCTL[0] &= ~TIMER_A_CCTLN_CCIFG;
    P1->OUT &= ~BIT0;EUSCI_A0->TXBUF='0';
}
void TA0_N_IRQHandler(void)
{

 TIMER_A0->CCTL[1] &= ~TIMER_A_CCTLN_CCIFG;
 P1->OUT |= BIT0;EUSCI_A0->TXBUF='N';
    // Add Offset to TIMER_A0->CCR[1]
}
void PORT1_IRQHandler(void)
{
    if(P1->IFG & BIT1)
    {
    int i;
    dutycycle+=0.1;
    EUSCI_A0->TXBUF='k';   // Delay for switch debounce
    for( i = 0; i <1000; i++)
        ;

    P1->IFG &= ~BIT1;
}
}

