                                      1 ;--------------------------------------------------------
                                      2 ; File Created by SDCC : free open source ANSI-C Compiler
                                      3 ; Version 3.9.0 #11195 (MINGW64)
                                      4 ;--------------------------------------------------------
                                      5 	.module main
                                      6 	.optsdcc -mmcs51 --model-large
                                      7 	
                                      8 ;--------------------------------------------------------
                                      9 ; Public variables in this module
                                     10 ;--------------------------------------------------------
                                     11 	.globl _main
                                     12 	.globl _randomread_handler
                                     13 	.globl _writebytehandler
                                     14 	.globl _readint
                                     15 	.globl _putstr
                                     16 	.globl _inputchecker
                                     17 	.globl _strtohex
                                     18 	.globl _seq_read
                                     19 	.globl _random_read
                                     20 	.globl _byte_write
                                     21 	.globl _i2c_nack
                                     22 	.globl _i2c_write
                                     23 	.globl _restart_i2c
                                     24 	.globl _i2c_stop
                                     25 	.globl _i2c_reset
                                     26 	.globl _toupper
                                     27 	.globl _printf_tiny
                                     28 	.globl _gets
                                     29 	.globl _printf
                                     30 	.globl _atoi
                                     31 	.globl _P5_7
                                     32 	.globl _P5_6
                                     33 	.globl _P5_5
                                     34 	.globl _P5_4
                                     35 	.globl _P5_3
                                     36 	.globl _P5_2
                                     37 	.globl _P5_1
                                     38 	.globl _P5_0
                                     39 	.globl _P4_7
                                     40 	.globl _P4_6
                                     41 	.globl _P4_5
                                     42 	.globl _P4_4
                                     43 	.globl _P4_3
                                     44 	.globl _P4_2
                                     45 	.globl _P4_1
                                     46 	.globl _P4_0
                                     47 	.globl _PX0L
                                     48 	.globl _PT0L
                                     49 	.globl _PX1L
                                     50 	.globl _PT1L
                                     51 	.globl _PSL
                                     52 	.globl _PT2L
                                     53 	.globl _PPCL
                                     54 	.globl _EC
                                     55 	.globl _CCF0
                                     56 	.globl _CCF1
                                     57 	.globl _CCF2
                                     58 	.globl _CCF3
                                     59 	.globl _CCF4
                                     60 	.globl _CR
                                     61 	.globl _CF
                                     62 	.globl _TF2
                                     63 	.globl _EXF2
                                     64 	.globl _RCLK
                                     65 	.globl _TCLK
                                     66 	.globl _EXEN2
                                     67 	.globl _TR2
                                     68 	.globl _C_T2
                                     69 	.globl _CP_RL2
                                     70 	.globl _T2CON_7
                                     71 	.globl _T2CON_6
                                     72 	.globl _T2CON_5
                                     73 	.globl _T2CON_4
                                     74 	.globl _T2CON_3
                                     75 	.globl _T2CON_2
                                     76 	.globl _T2CON_1
                                     77 	.globl _T2CON_0
                                     78 	.globl _PT2
                                     79 	.globl _ET2
                                     80 	.globl _CY
                                     81 	.globl _AC
                                     82 	.globl _F0
                                     83 	.globl _RS1
                                     84 	.globl _RS0
                                     85 	.globl _OV
                                     86 	.globl _F1
                                     87 	.globl _P
                                     88 	.globl _PS
                                     89 	.globl _PT1
                                     90 	.globl _PX1
                                     91 	.globl _PT0
                                     92 	.globl _PX0
                                     93 	.globl _RD
                                     94 	.globl _WR
                                     95 	.globl _T1
                                     96 	.globl _T0
                                     97 	.globl _INT1
                                     98 	.globl _INT0
                                     99 	.globl _TXD
                                    100 	.globl _RXD
                                    101 	.globl _P3_7
                                    102 	.globl _P3_6
                                    103 	.globl _P3_5
                                    104 	.globl _P3_4
                                    105 	.globl _P3_3
                                    106 	.globl _P3_2
                                    107 	.globl _P3_1
                                    108 	.globl _P3_0
                                    109 	.globl _EA
                                    110 	.globl _ES
                                    111 	.globl _ET1
                                    112 	.globl _EX1
                                    113 	.globl _ET0
                                    114 	.globl _EX0
                                    115 	.globl _P2_7
                                    116 	.globl _P2_6
                                    117 	.globl _P2_5
                                    118 	.globl _P2_4
                                    119 	.globl _P2_3
                                    120 	.globl _P2_2
                                    121 	.globl _P2_1
                                    122 	.globl _P2_0
                                    123 	.globl _SM0
                                    124 	.globl _SM1
                                    125 	.globl _SM2
                                    126 	.globl _REN
                                    127 	.globl _TB8
                                    128 	.globl _RB8
                                    129 	.globl _TI
                                    130 	.globl _RI
                                    131 	.globl _P1_7
                                    132 	.globl _P1_6
                                    133 	.globl _P1_5
                                    134 	.globl _P1_4
                                    135 	.globl _P1_3
                                    136 	.globl _P1_2
                                    137 	.globl _P1_1
                                    138 	.globl _P1_0
                                    139 	.globl _TF1
                                    140 	.globl _TR1
                                    141 	.globl _TF0
                                    142 	.globl _TR0
                                    143 	.globl _IE1
                                    144 	.globl _IT1
                                    145 	.globl _IE0
                                    146 	.globl _IT0
                                    147 	.globl _P0_7
                                    148 	.globl _P0_6
                                    149 	.globl _P0_5
                                    150 	.globl _P0_4
                                    151 	.globl _P0_3
                                    152 	.globl _P0_2
                                    153 	.globl _P0_1
                                    154 	.globl _P0_0
                                    155 	.globl _EECON
                                    156 	.globl _KBF
                                    157 	.globl _KBE
                                    158 	.globl _KBLS
                                    159 	.globl _BRL
                                    160 	.globl _BDRCON
                                    161 	.globl _T2MOD
                                    162 	.globl _SPDAT
                                    163 	.globl _SPSTA
                                    164 	.globl _SPCON
                                    165 	.globl _SADEN
                                    166 	.globl _SADDR
                                    167 	.globl _WDTPRG
                                    168 	.globl _WDTRST
                                    169 	.globl _P5
                                    170 	.globl _P4
                                    171 	.globl _IPH1
                                    172 	.globl _IPL1
                                    173 	.globl _IPH0
                                    174 	.globl _IPL0
                                    175 	.globl _IEN1
                                    176 	.globl _IEN0
                                    177 	.globl _CMOD
                                    178 	.globl _CL
                                    179 	.globl _CH
                                    180 	.globl _CCON
                                    181 	.globl _CCAPM4
                                    182 	.globl _CCAPM3
                                    183 	.globl _CCAPM2
                                    184 	.globl _CCAPM1
                                    185 	.globl _CCAPM0
                                    186 	.globl _CCAP4L
                                    187 	.globl _CCAP3L
                                    188 	.globl _CCAP2L
                                    189 	.globl _CCAP1L
                                    190 	.globl _CCAP0L
                                    191 	.globl _CCAP4H
                                    192 	.globl _CCAP3H
                                    193 	.globl _CCAP2H
                                    194 	.globl _CCAP1H
                                    195 	.globl _CCAP0H
                                    196 	.globl _CKCON1
                                    197 	.globl _CKCON0
                                    198 	.globl _CKRL
                                    199 	.globl _AUXR1
                                    200 	.globl _AUXR
                                    201 	.globl _TH2
                                    202 	.globl _TL2
                                    203 	.globl _RCAP2H
                                    204 	.globl _RCAP2L
                                    205 	.globl _T2CON
                                    206 	.globl _B
                                    207 	.globl _ACC
                                    208 	.globl _PSW
                                    209 	.globl _IP
                                    210 	.globl _P3
                                    211 	.globl _IE
                                    212 	.globl _P2
                                    213 	.globl _SBUF
                                    214 	.globl _SCON
                                    215 	.globl _P1
                                    216 	.globl _TH1
                                    217 	.globl _TH0
                                    218 	.globl _TL1
                                    219 	.globl _TL0
                                    220 	.globl _TMOD
                                    221 	.globl _TCON
                                    222 	.globl _PCON
                                    223 	.globl _DPH
                                    224 	.globl _DPL
                                    225 	.globl _SP
                                    226 	.globl _P0
                                    227 	.globl _errorflag
                                    228 	.globl _control
                                    229 	.globl _flag_inputcheck
                                    230 	.globl _output
                                    231 	.globl _menuselect
                                    232 	.globl _addressreceiver
                                    233 	.globl _putchar
                                    234 	.globl _getchar
                                    235 ;--------------------------------------------------------
                                    236 ; special function registers
                                    237 ;--------------------------------------------------------
                                    238 	.area RSEG    (ABS,DATA)
      000000                        239 	.org 0x0000
                           000080   240 _P0	=	0x0080
                           000081   241 _SP	=	0x0081
                           000082   242 _DPL	=	0x0082
                           000083   243 _DPH	=	0x0083
                           000087   244 _PCON	=	0x0087
                           000088   245 _TCON	=	0x0088
                           000089   246 _TMOD	=	0x0089
                           00008A   247 _TL0	=	0x008a
                           00008B   248 _TL1	=	0x008b
                           00008C   249 _TH0	=	0x008c
                           00008D   250 _TH1	=	0x008d
                           000090   251 _P1	=	0x0090
                           000098   252 _SCON	=	0x0098
                           000099   253 _SBUF	=	0x0099
                           0000A0   254 _P2	=	0x00a0
                           0000A8   255 _IE	=	0x00a8
                           0000B0   256 _P3	=	0x00b0
                           0000B8   257 _IP	=	0x00b8
                           0000D0   258 _PSW	=	0x00d0
                           0000E0   259 _ACC	=	0x00e0
                           0000F0   260 _B	=	0x00f0
                           0000C8   261 _T2CON	=	0x00c8
                           0000CA   262 _RCAP2L	=	0x00ca
                           0000CB   263 _RCAP2H	=	0x00cb
                           0000CC   264 _TL2	=	0x00cc
                           0000CD   265 _TH2	=	0x00cd
                           00008E   266 _AUXR	=	0x008e
                           0000A2   267 _AUXR1	=	0x00a2
                           000097   268 _CKRL	=	0x0097
                           00008F   269 _CKCON0	=	0x008f
                           0000AF   270 _CKCON1	=	0x00af
                           0000FA   271 _CCAP0H	=	0x00fa
                           0000FB   272 _CCAP1H	=	0x00fb
                           0000FC   273 _CCAP2H	=	0x00fc
                           0000FD   274 _CCAP3H	=	0x00fd
                           0000FE   275 _CCAP4H	=	0x00fe
                           0000EA   276 _CCAP0L	=	0x00ea
                           0000EB   277 _CCAP1L	=	0x00eb
                           0000EC   278 _CCAP2L	=	0x00ec
                           0000ED   279 _CCAP3L	=	0x00ed
                           0000EE   280 _CCAP4L	=	0x00ee
                           0000DA   281 _CCAPM0	=	0x00da
                           0000DB   282 _CCAPM1	=	0x00db
                           0000DC   283 _CCAPM2	=	0x00dc
                           0000DD   284 _CCAPM3	=	0x00dd
                           0000DE   285 _CCAPM4	=	0x00de
                           0000D8   286 _CCON	=	0x00d8
                           0000F9   287 _CH	=	0x00f9
                           0000E9   288 _CL	=	0x00e9
                           0000D9   289 _CMOD	=	0x00d9
                           0000A8   290 _IEN0	=	0x00a8
                           0000B1   291 _IEN1	=	0x00b1
                           0000B8   292 _IPL0	=	0x00b8
                           0000B7   293 _IPH0	=	0x00b7
                           0000B2   294 _IPL1	=	0x00b2
                           0000B3   295 _IPH1	=	0x00b3
                           0000C0   296 _P4	=	0x00c0
                           0000E8   297 _P5	=	0x00e8
                           0000A6   298 _WDTRST	=	0x00a6
                           0000A7   299 _WDTPRG	=	0x00a7
                           0000A9   300 _SADDR	=	0x00a9
                           0000B9   301 _SADEN	=	0x00b9
                           0000C3   302 _SPCON	=	0x00c3
                           0000C4   303 _SPSTA	=	0x00c4
                           0000C5   304 _SPDAT	=	0x00c5
                           0000C9   305 _T2MOD	=	0x00c9
                           00009B   306 _BDRCON	=	0x009b
                           00009A   307 _BRL	=	0x009a
                           00009C   308 _KBLS	=	0x009c
                           00009D   309 _KBE	=	0x009d
                           00009E   310 _KBF	=	0x009e
                           0000D2   311 _EECON	=	0x00d2
                                    312 ;--------------------------------------------------------
                                    313 ; special function bits
                                    314 ;--------------------------------------------------------
                                    315 	.area RSEG    (ABS,DATA)
      000000                        316 	.org 0x0000
                           000080   317 _P0_0	=	0x0080
                           000081   318 _P0_1	=	0x0081
                           000082   319 _P0_2	=	0x0082
                           000083   320 _P0_3	=	0x0083
                           000084   321 _P0_4	=	0x0084
                           000085   322 _P0_5	=	0x0085
                           000086   323 _P0_6	=	0x0086
                           000087   324 _P0_7	=	0x0087
                           000088   325 _IT0	=	0x0088
                           000089   326 _IE0	=	0x0089
                           00008A   327 _IT1	=	0x008a
                           00008B   328 _IE1	=	0x008b
                           00008C   329 _TR0	=	0x008c
                           00008D   330 _TF0	=	0x008d
                           00008E   331 _TR1	=	0x008e
                           00008F   332 _TF1	=	0x008f
                           000090   333 _P1_0	=	0x0090
                           000091   334 _P1_1	=	0x0091
                           000092   335 _P1_2	=	0x0092
                           000093   336 _P1_3	=	0x0093
                           000094   337 _P1_4	=	0x0094
                           000095   338 _P1_5	=	0x0095
                           000096   339 _P1_6	=	0x0096
                           000097   340 _P1_7	=	0x0097
                           000098   341 _RI	=	0x0098
                           000099   342 _TI	=	0x0099
                           00009A   343 _RB8	=	0x009a
                           00009B   344 _TB8	=	0x009b
                           00009C   345 _REN	=	0x009c
                           00009D   346 _SM2	=	0x009d
                           00009E   347 _SM1	=	0x009e
                           00009F   348 _SM0	=	0x009f
                           0000A0   349 _P2_0	=	0x00a0
                           0000A1   350 _P2_1	=	0x00a1
                           0000A2   351 _P2_2	=	0x00a2
                           0000A3   352 _P2_3	=	0x00a3
                           0000A4   353 _P2_4	=	0x00a4
                           0000A5   354 _P2_5	=	0x00a5
                           0000A6   355 _P2_6	=	0x00a6
                           0000A7   356 _P2_7	=	0x00a7
                           0000A8   357 _EX0	=	0x00a8
                           0000A9   358 _ET0	=	0x00a9
                           0000AA   359 _EX1	=	0x00aa
                           0000AB   360 _ET1	=	0x00ab
                           0000AC   361 _ES	=	0x00ac
                           0000AF   362 _EA	=	0x00af
                           0000B0   363 _P3_0	=	0x00b0
                           0000B1   364 _P3_1	=	0x00b1
                           0000B2   365 _P3_2	=	0x00b2
                           0000B3   366 _P3_3	=	0x00b3
                           0000B4   367 _P3_4	=	0x00b4
                           0000B5   368 _P3_5	=	0x00b5
                           0000B6   369 _P3_6	=	0x00b6
                           0000B7   370 _P3_7	=	0x00b7
                           0000B0   371 _RXD	=	0x00b0
                           0000B1   372 _TXD	=	0x00b1
                           0000B2   373 _INT0	=	0x00b2
                           0000B3   374 _INT1	=	0x00b3
                           0000B4   375 _T0	=	0x00b4
                           0000B5   376 _T1	=	0x00b5
                           0000B6   377 _WR	=	0x00b6
                           0000B7   378 _RD	=	0x00b7
                           0000B8   379 _PX0	=	0x00b8
                           0000B9   380 _PT0	=	0x00b9
                           0000BA   381 _PX1	=	0x00ba
                           0000BB   382 _PT1	=	0x00bb
                           0000BC   383 _PS	=	0x00bc
                           0000D0   384 _P	=	0x00d0
                           0000D1   385 _F1	=	0x00d1
                           0000D2   386 _OV	=	0x00d2
                           0000D3   387 _RS0	=	0x00d3
                           0000D4   388 _RS1	=	0x00d4
                           0000D5   389 _F0	=	0x00d5
                           0000D6   390 _AC	=	0x00d6
                           0000D7   391 _CY	=	0x00d7
                           0000AD   392 _ET2	=	0x00ad
                           0000BD   393 _PT2	=	0x00bd
                           0000C8   394 _T2CON_0	=	0x00c8
                           0000C9   395 _T2CON_1	=	0x00c9
                           0000CA   396 _T2CON_2	=	0x00ca
                           0000CB   397 _T2CON_3	=	0x00cb
                           0000CC   398 _T2CON_4	=	0x00cc
                           0000CD   399 _T2CON_5	=	0x00cd
                           0000CE   400 _T2CON_6	=	0x00ce
                           0000CF   401 _T2CON_7	=	0x00cf
                           0000C8   402 _CP_RL2	=	0x00c8
                           0000C9   403 _C_T2	=	0x00c9
                           0000CA   404 _TR2	=	0x00ca
                           0000CB   405 _EXEN2	=	0x00cb
                           0000CC   406 _TCLK	=	0x00cc
                           0000CD   407 _RCLK	=	0x00cd
                           0000CE   408 _EXF2	=	0x00ce
                           0000CF   409 _TF2	=	0x00cf
                           0000DF   410 _CF	=	0x00df
                           0000DE   411 _CR	=	0x00de
                           0000DC   412 _CCF4	=	0x00dc
                           0000DB   413 _CCF3	=	0x00db
                           0000DA   414 _CCF2	=	0x00da
                           0000D9   415 _CCF1	=	0x00d9
                           0000D8   416 _CCF0	=	0x00d8
                           0000AE   417 _EC	=	0x00ae
                           0000BE   418 _PPCL	=	0x00be
                           0000BD   419 _PT2L	=	0x00bd
                           0000BC   420 _PSL	=	0x00bc
                           0000BB   421 _PT1L	=	0x00bb
                           0000BA   422 _PX1L	=	0x00ba
                           0000B9   423 _PT0L	=	0x00b9
                           0000B8   424 _PX0L	=	0x00b8
                           0000C0   425 _P4_0	=	0x00c0
                           0000C1   426 _P4_1	=	0x00c1
                           0000C2   427 _P4_2	=	0x00c2
                           0000C3   428 _P4_3	=	0x00c3
                           0000C4   429 _P4_4	=	0x00c4
                           0000C5   430 _P4_5	=	0x00c5
                           0000C6   431 _P4_6	=	0x00c6
                           0000C7   432 _P4_7	=	0x00c7
                           0000E8   433 _P5_0	=	0x00e8
                           0000E9   434 _P5_1	=	0x00e9
                           0000EA   435 _P5_2	=	0x00ea
                           0000EB   436 _P5_3	=	0x00eb
                           0000EC   437 _P5_4	=	0x00ec
                           0000ED   438 _P5_5	=	0x00ed
                           0000EE   439 _P5_6	=	0x00ee
                           0000EF   440 _P5_7	=	0x00ef
                                    441 ;--------------------------------------------------------
                                    442 ; overlayable register banks
                                    443 ;--------------------------------------------------------
                                    444 	.area REG_BANK_0	(REL,OVR,DATA)
      000000                        445 	.ds 8
                                    446 ;--------------------------------------------------------
                                    447 ; internal ram data
                                    448 ;--------------------------------------------------------
                                    449 	.area DSEG    (DATA)
      000000                        450 _inputchecker_sloc0_1_0:
      000000                        451 	.ds 3
      000003                        452 _inputchecker_sloc1_1_0:
      000003                        453 	.ds 1
                                    454 ;--------------------------------------------------------
                                    455 ; overlayable items in internal ram 
                                    456 ;--------------------------------------------------------
                                    457 ;--------------------------------------------------------
                                    458 ; Stack segment in internal ram 
                                    459 ;--------------------------------------------------------
                                    460 	.area	SSEG
      000000                        461 __start__stack:
      000000                        462 	.ds	1
                                    463 
                                    464 ;--------------------------------------------------------
                                    465 ; indirectly addressable internal ram data
                                    466 ;--------------------------------------------------------
                                    467 	.area ISEG    (DATA)
                                    468 ;--------------------------------------------------------
                                    469 ; absolute internal ram data
                                    470 ;--------------------------------------------------------
                                    471 	.area IABS    (ABS,DATA)
                                    472 	.area IABS    (ABS,DATA)
                                    473 ;--------------------------------------------------------
                                    474 ; bit data
                                    475 ;--------------------------------------------------------
                                    476 	.area BSEG    (BIT)
                                    477 ;--------------------------------------------------------
                                    478 ; paged external ram data
                                    479 ;--------------------------------------------------------
                                    480 	.area PSEG    (PAG,XDATA)
                                    481 ;--------------------------------------------------------
                                    482 ; external ram data
                                    483 ;--------------------------------------------------------
                                    484 	.area XSEG    (XDATA)
      000000                        485 _inputchecker_r_65536_90:
      000000                        486 	.ds 3
      000003                        487 _addressreceiver::
      000003                        488 	.ds 4
      000007                        489 _putchar_c_65536_94:
      000007                        490 	.ds 2
      000009                        491 _putstr_s_65536_98:
      000009                        492 	.ds 3
      00000C                        493 _menuselect::
      00000C                        494 	.ds 2
      00000E                        495 _writebytehandler_receiver_65536_103:
      00000E                        496 	.ds 3
      000011                        497 _randomread_handler_receiver_65536_110:
      000011                        498 	.ds 3
      000014                        499 _output::
      000014                        500 	.ds 1
      000015                        501 _main_addressreceiver1_196609_120:
      000015                        502 	.ds 4
      000019                        503 _main_addressreceiver2_196610_122:
      000019                        504 	.ds 4
                                    505 ;--------------------------------------------------------
                                    506 ; absolute external ram data
                                    507 ;--------------------------------------------------------
                                    508 	.area XABS    (ABS,XDATA)
                                    509 ;--------------------------------------------------------
                                    510 ; external initialized ram data
                                    511 ;--------------------------------------------------------
                                    512 	.area XISEG   (XDATA)
      000000                        513 _flag_inputcheck::
      000000                        514 	.ds 2
      000002                        515 _control::
      000002                        516 	.ds 1
      000003                        517 _errorflag::
      000003                        518 	.ds 1
                                    519 	.area HOME    (CODE)
                                    520 	.area GSINIT0 (CODE)
                                    521 	.area GSINIT1 (CODE)
                                    522 	.area GSINIT2 (CODE)
                                    523 	.area GSINIT3 (CODE)
                                    524 	.area GSINIT4 (CODE)
                                    525 	.area GSINIT5 (CODE)
                                    526 	.area GSINIT  (CODE)
                                    527 	.area GSFINAL (CODE)
                                    528 	.area CSEG    (CODE)
                                    529 ;--------------------------------------------------------
                                    530 ; interrupt vector 
                                    531 ;--------------------------------------------------------
                                    532 	.area HOME    (CODE)
      000000                        533 __interrupt_vect:
      000000 02r00r00         [24]  534 	ljmp	__sdcc_gsinit_startup
                                    535 ;--------------------------------------------------------
                                    536 ; global & static initialisations
                                    537 ;--------------------------------------------------------
                                    538 	.area HOME    (CODE)
                                    539 	.area GSINIT  (CODE)
                                    540 	.area GSFINAL (CODE)
                                    541 	.area GSINIT  (CODE)
                                    542 	.globl __sdcc_gsinit_startup
                                    543 	.globl __sdcc_program_startup
                                    544 	.globl __start__stack
                                    545 	.globl __mcs51_genXINIT
                                    546 	.globl __mcs51_genXRAMCLEAR
                                    547 	.globl __mcs51_genRAMCLEAR
                                    548 	.area GSFINAL (CODE)
      000000 02r00r03         [24]  549 	ljmp	__sdcc_program_startup
                                    550 ;--------------------------------------------------------
                                    551 ; Home
                                    552 ;--------------------------------------------------------
                                    553 	.area HOME    (CODE)
                                    554 	.area HOME    (CODE)
      000003                        555 __sdcc_program_startup:
      000003 02r02rB9         [24]  556 	ljmp	_main
                                    557 ;	return from main will return to caller
                                    558 ;--------------------------------------------------------
                                    559 ; code
                                    560 ;--------------------------------------------------------
                                    561 	.area CSEG    (CODE)
                                    562 ;------------------------------------------------------------
                                    563 ;Allocation info for local variables in function 'inputchecker'
                                    564 ;------------------------------------------------------------
                                    565 ;sloc0                     Allocated with name '_inputchecker_sloc0_1_0'
                                    566 ;sloc1                     Allocated with name '_inputchecker_sloc1_1_0'
                                    567 ;r                         Allocated with name '_inputchecker_r_65536_90'
                                    568 ;i                         Allocated with name '_inputchecker_i_65536_91'
                                    569 ;------------------------------------------------------------
                                    570 ;	main.c:14: void inputchecker(char *r)
                                    571 ;	-----------------------------------------
                                    572 ;	 function inputchecker
                                    573 ;	-----------------------------------------
      000000                        574 _inputchecker:
                           000007   575 	ar7 = 0x07
                           000006   576 	ar6 = 0x06
                           000005   577 	ar5 = 0x05
                           000004   578 	ar4 = 0x04
                           000003   579 	ar3 = 0x03
                           000002   580 	ar2 = 0x02
                           000001   581 	ar1 = 0x01
                           000000   582 	ar0 = 0x00
      000000 AF F0            [24]  583 	mov	r7,b
      000002 AE 83            [24]  584 	mov	r6,dph
      000004 E5 82            [12]  585 	mov	a,dpl
      000006 90r00r00         [24]  586 	mov	dptr,#_inputchecker_r_65536_90
      000009 F0               [24]  587 	movx	@dptr,a
      00000A EE               [12]  588 	mov	a,r6
      00000B A3               [24]  589 	inc	dptr
      00000C F0               [24]  590 	movx	@dptr,a
      00000D EF               [12]  591 	mov	a,r7
      00000E A3               [24]  592 	inc	dptr
      00000F F0               [24]  593 	movx	@dptr,a
                                    594 ;	main.c:17: flag_inputcheck=0;
      000010 90r00r00         [24]  595 	mov	dptr,#_flag_inputcheck
      000013 E4               [12]  596 	clr	a
      000014 F0               [24]  597 	movx	@dptr,a
      000015 A3               [24]  598 	inc	dptr
      000016 F0               [24]  599 	movx	@dptr,a
                                    600 ;	main.c:18: while(r[i]!='\0')
      000017 90r00r00         [24]  601 	mov	dptr,#_inputchecker_r_65536_90
      00001A E0               [24]  602 	movx	a,@dptr
      00001B FD               [12]  603 	mov	r5,a
      00001C A3               [24]  604 	inc	dptr
      00001D E0               [24]  605 	movx	a,@dptr
      00001E FE               [12]  606 	mov	r6,a
      00001F A3               [24]  607 	inc	dptr
      000020 E0               [24]  608 	movx	a,@dptr
      000021 FF               [12]  609 	mov	r7,a
      000022 8D 02            [24]  610 	mov	ar2,r5
      000024 8E 03            [24]  611 	mov	ar3,r6
      000026 8F 04            [24]  612 	mov	ar4,r7
      000028 8D*00            [24]  613 	mov	_inputchecker_sloc0_1_0,r5
      00002A 8E*01            [24]  614 	mov	(_inputchecker_sloc0_1_0 + 1),r6
      00002C 8F*02            [24]  615 	mov	(_inputchecker_sloc0_1_0 + 2),r7
      00002E 78 00            [12]  616 	mov	r0,#0x00
      000030 79 00            [12]  617 	mov	r1,#0x00
      000032                        618 00109$:
      000032 C0 02            [24]  619 	push	ar2
      000034 C0 03            [24]  620 	push	ar3
      000036 C0 04            [24]  621 	push	ar4
      000038 E8               [12]  622 	mov	a,r0
      000039 25*00            [12]  623 	add	a,_inputchecker_sloc0_1_0
      00003B FA               [12]  624 	mov	r2,a
      00003C E9               [12]  625 	mov	a,r1
      00003D 35*01            [12]  626 	addc	a,(_inputchecker_sloc0_1_0 + 1)
      00003F FB               [12]  627 	mov	r3,a
      000040 AC*02            [24]  628 	mov	r4,(_inputchecker_sloc0_1_0 + 2)
      000042 8A 82            [24]  629 	mov	dpl,r2
      000044 8B 83            [24]  630 	mov	dph,r3
      000046 8C F0            [24]  631 	mov	b,r4
      000048 12r00r00         [24]  632 	lcall	__gptrget
      00004B F5*03            [12]  633 	mov	_inputchecker_sloc1_1_0,a
      00004D D0 04            [24]  634 	pop	ar4
      00004F D0 03            [24]  635 	pop	ar3
      000051 D0 02            [24]  636 	pop	ar2
      000053 E5*03            [12]  637 	mov	a,_inputchecker_sloc1_1_0
      000055 70 01            [24]  638 	jnz	00134$
      000057 22               [24]  639 	ret
      000058                        640 00134$:
                                    641 ;	main.c:20: if(((r[i]>='0')&&(r[i]<='9'))||((r[i]>='a')&&(r[i]<='f'))||((r[i]>='A')&&(r[i]<='F')))
      000058 74 D0            [12]  642 	mov	a,#0x100 - 0x30
      00005A 25*03            [12]  643 	add	a,_inputchecker_sloc1_1_0
      00005C 50 06            [24]  644 	jnc	00106$
      00005E E5*03            [12]  645 	mov	a,_inputchecker_sloc1_1_0
      000060 24 C6            [12]  646 	add	a,#0xff - 0x39
      000062 50 54            [24]  647 	jnc	00101$
      000064                        648 00106$:
      000064 C0 02            [24]  649 	push	ar2
      000066 C0 03            [24]  650 	push	ar3
      000068 C0 04            [24]  651 	push	ar4
      00006A E8               [12]  652 	mov	a,r0
      00006B 2D               [12]  653 	add	a,r5
      00006C FA               [12]  654 	mov	r2,a
      00006D E9               [12]  655 	mov	a,r1
      00006E 3E               [12]  656 	addc	a,r6
      00006F FB               [12]  657 	mov	r3,a
      000070 8F 04            [24]  658 	mov	ar4,r7
      000072 8A 82            [24]  659 	mov	dpl,r2
      000074 8B 83            [24]  660 	mov	dph,r3
      000076 8C F0            [24]  661 	mov	b,r4
      000078 12r00r00         [24]  662 	lcall	__gptrget
      00007B F5*03            [12]  663 	mov	_inputchecker_sloc1_1_0,a
      00007D C3               [12]  664 	clr	c
      00007E 94 61            [12]  665 	subb	a,#0x61
      000080 D0 04            [24]  666 	pop	ar4
      000082 D0 03            [24]  667 	pop	ar3
      000084 D0 02            [24]  668 	pop	ar2
      000086 40 06            [24]  669 	jc	00108$
      000088 E5*03            [12]  670 	mov	a,_inputchecker_sloc1_1_0
      00008A 24 99            [12]  671 	add	a,#0xff - 0x66
      00008C 50 2A            [24]  672 	jnc	00101$
      00008E                        673 00108$:
      00008E C0 05            [24]  674 	push	ar5
      000090 C0 06            [24]  675 	push	ar6
      000092 C0 07            [24]  676 	push	ar7
      000094 E8               [12]  677 	mov	a,r0
      000095 2A               [12]  678 	add	a,r2
      000096 FD               [12]  679 	mov	r5,a
      000097 E9               [12]  680 	mov	a,r1
      000098 3B               [12]  681 	addc	a,r3
      000099 FE               [12]  682 	mov	r6,a
      00009A 8C 07            [24]  683 	mov	ar7,r4
      00009C 8D 82            [24]  684 	mov	dpl,r5
      00009E 8E 83            [24]  685 	mov	dph,r6
      0000A0 8F F0            [24]  686 	mov	b,r7
      0000A2 12r00r00         [24]  687 	lcall	__gptrget
      0000A5 F5*03            [12]  688 	mov	_inputchecker_sloc1_1_0,a
      0000A7 C3               [12]  689 	clr	c
      0000A8 94 41            [12]  690 	subb	a,#0x41
      0000AA D0 07            [24]  691 	pop	ar7
      0000AC D0 06            [24]  692 	pop	ar6
      0000AE D0 05            [24]  693 	pop	ar5
      0000B0 40 0E            [24]  694 	jc	00102$
      0000B2 E5*03            [12]  695 	mov	a,_inputchecker_sloc1_1_0
      0000B4 24 B9            [12]  696 	add	a,#0xff - 0x46
      0000B6 40 08            [24]  697 	jc	00102$
      0000B8                        698 00101$:
                                    699 ;	main.c:21: i++;
      0000B8 08               [12]  700 	inc	r0
      0000B9 B8 00 01         [24]  701 	cjne	r0,#0x00,00141$
      0000BC 09               [12]  702 	inc	r1
      0000BD                        703 00141$:
      0000BD 02r00r32         [24]  704 	ljmp	00109$
      0000C0                        705 00102$:
                                    706 ;	main.c:26: printf_tiny("Invalid character entered Please retry\n\r");
      0000C0 74r00            [12]  707 	mov	a,#___str_0
      0000C2 C0 E0            [24]  708 	push	acc
      0000C4 74s00            [12]  709 	mov	a,#(___str_0 >> 8)
      0000C6 C0 E0            [24]  710 	push	acc
      0000C8 12r00r00         [24]  711 	lcall	_printf_tiny
      0000CB 15 81            [12]  712 	dec	sp
      0000CD 15 81            [12]  713 	dec	sp
                                    714 ;	main.c:27: flag_inputcheck=1;
      0000CF 90r00r00         [24]  715 	mov	dptr,#_flag_inputcheck
      0000D2 74 01            [12]  716 	mov	a,#0x01
      0000D4 F0               [24]  717 	movx	@dptr,a
      0000D5 E4               [12]  718 	clr	a
      0000D6 A3               [24]  719 	inc	dptr
      0000D7 F0               [24]  720 	movx	@dptr,a
                                    721 ;	main.c:28: return;
                                    722 ;	main.c:32: }
      0000D8 22               [24]  723 	ret
                                    724 ;------------------------------------------------------------
                                    725 ;Allocation info for local variables in function 'putchar'
                                    726 ;------------------------------------------------------------
                                    727 ;c                         Allocated with name '_putchar_c_65536_94'
                                    728 ;------------------------------------------------------------
                                    729 ;	main.c:37: int putchar (int c)//serial outps char value
                                    730 ;	-----------------------------------------
                                    731 ;	 function putchar
                                    732 ;	-----------------------------------------
      0000D9                        733 _putchar:
      0000D9 AF 83            [24]  734 	mov	r7,dph
      0000DB E5 82            [12]  735 	mov	a,dpl
      0000DD 90r00r07         [24]  736 	mov	dptr,#_putchar_c_65536_94
      0000E0 F0               [24]  737 	movx	@dptr,a
      0000E1 EF               [12]  738 	mov	a,r7
      0000E2 A3               [24]  739 	inc	dptr
      0000E3 F0               [24]  740 	movx	@dptr,a
                                    741 ;	main.c:39: while (!TI);				// compare asm code generated for these three lines
      0000E4                        742 00101$:
      0000E4 30 99 FD         [24]  743 	jnb	_TI,00101$
                                    744 ;	main.c:40: while (TI == 0);
      0000E7                        745 00104$:
      0000E7 30 99 FD         [24]  746 	jnb	_TI,00104$
                                    747 ;	main.c:41: while ((SCON & 0x02) == 0);    // wait for TX ready, spin on TI
      0000EA                        748 00107$:
      0000EA E5 98            [12]  749 	mov	a,_SCON
      0000EC 30 E1 FB         [24]  750 	jnb	acc.1,00107$
                                    751 ;	main.c:42: SBUF = c;  	// load serial port with transmit value
      0000EF 90r00r07         [24]  752 	mov	dptr,#_putchar_c_65536_94
      0000F2 E0               [24]  753 	movx	a,@dptr
      0000F3 FE               [12]  754 	mov	r6,a
      0000F4 A3               [24]  755 	inc	dptr
      0000F5 E0               [24]  756 	movx	a,@dptr
      0000F6 8E 99            [24]  757 	mov	_SBUF,r6
                                    758 ;	main.c:43: TI = 0;  	// clear TI flag
                                    759 ;	assignBit
      0000F8 C2 99            [12]  760 	clr	_TI
                                    761 ;	main.c:44: return 0;
      0000FA 90 00 00         [24]  762 	mov	dptr,#0x0000
                                    763 ;	main.c:45: }
      0000FD 22               [24]  764 	ret
                                    765 ;------------------------------------------------------------
                                    766 ;Allocation info for local variables in function 'getchar'
                                    767 ;------------------------------------------------------------
                                    768 ;	main.c:48: int getchar(void)//reads char value from serial
                                    769 ;	-----------------------------------------
                                    770 ;	 function getchar
                                    771 ;	-----------------------------------------
      0000FE                        772 _getchar:
                                    773 ;	main.c:51: while (!RI);                // compare asm code generated for these three lines
      0000FE                        774 00101$:
      0000FE 30 98 FD         [24]  775 	jnb	_RI,00101$
                                    776 ;	main.c:52: while ((SCON & 0x01) == 0);  // wait for character to be received, spin on RI
      000101                        777 00104$:
      000101 E5 98            [12]  778 	mov	a,_SCON
      000103 30 E0 FB         [24]  779 	jnb	acc.0,00104$
                                    780 ;	main.c:53: while (RI == 0);
      000106                        781 00107$:
                                    782 ;	main.c:54: RI = 0;			// clear RI flag
                                    783 ;	assignBit
      000106 10 98 02         [24]  784 	jbc	_RI,00130$
      000109 80 FB            [24]  785 	sjmp	00107$
      00010B                        786 00130$:
                                    787 ;	main.c:55: return SBUF;  	// return character from SBUF
      00010B AE 99            [24]  788 	mov	r6,_SBUF
      00010D 7F 00            [12]  789 	mov	r7,#0x00
      00010F 8E 82            [24]  790 	mov	dpl,r6
      000111 8F 83            [24]  791 	mov	dph,r7
                                    792 ;	main.c:56: }
      000113 22               [24]  793 	ret
                                    794 ;------------------------------------------------------------
                                    795 ;Allocation info for local variables in function 'putstr'
                                    796 ;------------------------------------------------------------
                                    797 ;s                         Allocated with name '_putstr_s_65536_98'
                                    798 ;i                         Allocated with name '_putstr_i_65536_99'
                                    799 ;------------------------------------------------------------
                                    800 ;	main.c:57: int putstr (char *s)//outputs string to serial
                                    801 ;	-----------------------------------------
                                    802 ;	 function putstr
                                    803 ;	-----------------------------------------
      000114                        804 _putstr:
      000114 AF F0            [24]  805 	mov	r7,b
      000116 AE 83            [24]  806 	mov	r6,dph
      000118 E5 82            [12]  807 	mov	a,dpl
      00011A 90r00r09         [24]  808 	mov	dptr,#_putstr_s_65536_98
      00011D F0               [24]  809 	movx	@dptr,a
      00011E EE               [12]  810 	mov	a,r6
      00011F A3               [24]  811 	inc	dptr
      000120 F0               [24]  812 	movx	@dptr,a
      000121 EF               [12]  813 	mov	a,r7
      000122 A3               [24]  814 	inc	dptr
      000123 F0               [24]  815 	movx	@dptr,a
                                    816 ;	main.c:60: while (*s) 			// output characters until NULL found
      000124 90r00r09         [24]  817 	mov	dptr,#_putstr_s_65536_98
      000127 E0               [24]  818 	movx	a,@dptr
      000128 FD               [12]  819 	mov	r5,a
      000129 A3               [24]  820 	inc	dptr
      00012A E0               [24]  821 	movx	a,@dptr
      00012B FE               [12]  822 	mov	r6,a
      00012C A3               [24]  823 	inc	dptr
      00012D E0               [24]  824 	movx	a,@dptr
      00012E FF               [12]  825 	mov	r7,a
      00012F 7B 00            [12]  826 	mov	r3,#0x00
      000131 7C 00            [12]  827 	mov	r4,#0x00
      000133                        828 00101$:
      000133 8D 82            [24]  829 	mov	dpl,r5
      000135 8E 83            [24]  830 	mov	dph,r6
      000137 8F F0            [24]  831 	mov	b,r7
      000139 12r00r00         [24]  832 	lcall	__gptrget
      00013C FA               [12]  833 	mov	r2,a
      00013D 60 36            [24]  834 	jz	00108$
                                    835 ;	main.c:62: putchar(*s++);
      00013F 0D               [12]  836 	inc	r5
      000140 BD 00 01         [24]  837 	cjne	r5,#0x00,00116$
      000143 0E               [12]  838 	inc	r6
      000144                        839 00116$:
      000144 90r00r09         [24]  840 	mov	dptr,#_putstr_s_65536_98
      000147 ED               [12]  841 	mov	a,r5
      000148 F0               [24]  842 	movx	@dptr,a
      000149 EE               [12]  843 	mov	a,r6
      00014A A3               [24]  844 	inc	dptr
      00014B F0               [24]  845 	movx	@dptr,a
      00014C EF               [12]  846 	mov	a,r7
      00014D A3               [24]  847 	inc	dptr
      00014E F0               [24]  848 	movx	@dptr,a
      00014F 8A 01            [24]  849 	mov	ar1,r2
      000151 7A 00            [12]  850 	mov	r2,#0x00
      000153 89 82            [24]  851 	mov	dpl,r1
      000155 8A 83            [24]  852 	mov	dph,r2
      000157 C0 07            [24]  853 	push	ar7
      000159 C0 06            [24]  854 	push	ar6
      00015B C0 05            [24]  855 	push	ar5
      00015D C0 04            [24]  856 	push	ar4
      00015F C0 03            [24]  857 	push	ar3
      000161 12r00rD9         [24]  858 	lcall	_putchar
      000164 D0 03            [24]  859 	pop	ar3
      000166 D0 04            [24]  860 	pop	ar4
      000168 D0 05            [24]  861 	pop	ar5
      00016A D0 06            [24]  862 	pop	ar6
      00016C D0 07            [24]  863 	pop	ar7
                                    864 ;	main.c:63: i++;
      00016E 0B               [12]  865 	inc	r3
      00016F BB 00 C1         [24]  866 	cjne	r3,#0x00,00101$
      000172 0C               [12]  867 	inc	r4
      000173 80 BE            [24]  868 	sjmp	00101$
      000175                        869 00108$:
      000175 90r00r09         [24]  870 	mov	dptr,#_putstr_s_65536_98
      000178 ED               [12]  871 	mov	a,r5
      000179 F0               [24]  872 	movx	@dptr,a
      00017A EE               [12]  873 	mov	a,r6
      00017B A3               [24]  874 	inc	dptr
      00017C F0               [24]  875 	movx	@dptr,a
      00017D EF               [12]  876 	mov	a,r7
      00017E A3               [24]  877 	inc	dptr
      00017F F0               [24]  878 	movx	@dptr,a
                                    879 ;	main.c:66: return i+1;
      000180 0B               [12]  880 	inc	r3
      000181 BB 00 01         [24]  881 	cjne	r3,#0x00,00118$
      000184 0C               [12]  882 	inc	r4
      000185                        883 00118$:
      000185 8B 82            [24]  884 	mov	dpl,r3
      000187 8C 83            [24]  885 	mov	dph,r4
                                    886 ;	main.c:67: }
      000189 22               [24]  887 	ret
                                    888 ;------------------------------------------------------------
                                    889 ;Allocation info for local variables in function 'readint'
                                    890 ;------------------------------------------------------------
                                    891 ;reader                    Allocated with name '_readint_reader_65536_101'
                                    892 ;number                    Allocated with name '_readint_number_65537_102'
                                    893 ;------------------------------------------------------------
                                    894 ;	main.c:69: int readint()//reads  char string as integer
                                    895 ;	-----------------------------------------
                                    896 ;	 function readint
                                    897 ;	-----------------------------------------
      00018A                        898 _readint:
                                    899 ;	main.c:72: gets(reader);
      00018A 90 00 00         [24]  900 	mov	dptr,#0x0000
      00018D 75 F0 00         [24]  901 	mov	b,#0x00
      000190 12r00r00         [24]  902 	lcall	_gets
                                    903 ;	main.c:73: int number=atoi(reader);
      000193 90 00 00         [24]  904 	mov	dptr,#0x0000
      000196 75 F0 00         [24]  905 	mov	b,#0x00
                                    906 ;	main.c:74: return number;
                                    907 ;	main.c:75: }
      000199 02r00r00         [24]  908 	ljmp	_atoi
                                    909 ;------------------------------------------------------------
                                    910 ;Allocation info for local variables in function 'writebytehandler'
                                    911 ;------------------------------------------------------------
                                    912 ;receiver                  Allocated with name '_writebytehandler_receiver_65536_103'
                                    913 ;t                         Allocated with name '_writebytehandler_t_65536_104'
                                    914 ;blockno                   Allocated with name '_writebytehandler_blockno_65536_104'
                                    915 ;address                   Allocated with name '_writebytehandler_address_65537_107'
                                    916 ;data                      Allocated with name '_writebytehandler_data_65538_108'
                                    917 ;------------------------------------------------------------
                                    918 ;	main.c:84: void writebytehandler(char *receiver)
                                    919 ;	-----------------------------------------
                                    920 ;	 function writebytehandler
                                    921 ;	-----------------------------------------
      00019C                        922 _writebytehandler:
      00019C AF F0            [24]  923 	mov	r7,b
      00019E AE 83            [24]  924 	mov	r6,dph
      0001A0 E5 82            [12]  925 	mov	a,dpl
      0001A2 90r00r0E         [24]  926 	mov	dptr,#_writebytehandler_receiver_65536_103
      0001A5 F0               [24]  927 	movx	@dptr,a
      0001A6 EE               [12]  928 	mov	a,r6
      0001A7 A3               [24]  929 	inc	dptr
      0001A8 F0               [24]  930 	movx	@dptr,a
      0001A9 EF               [12]  931 	mov	a,r7
      0001AA A3               [24]  932 	inc	dptr
      0001AB F0               [24]  933 	movx	@dptr,a
                                    934 ;	main.c:86: uint16_t t=strtohex(receiver);
      0001AC 90r00r0E         [24]  935 	mov	dptr,#_writebytehandler_receiver_65536_103
      0001AF E0               [24]  936 	movx	a,@dptr
      0001B0 FD               [12]  937 	mov	r5,a
      0001B1 A3               [24]  938 	inc	dptr
      0001B2 E0               [24]  939 	movx	a,@dptr
      0001B3 FE               [12]  940 	mov	r6,a
      0001B4 A3               [24]  941 	inc	dptr
      0001B5 E0               [24]  942 	movx	a,@dptr
      0001B6 FF               [12]  943 	mov	r7,a
      0001B7 8D 82            [24]  944 	mov	dpl,r5
      0001B9 8E 83            [24]  945 	mov	dph,r6
      0001BB 8F F0            [24]  946 	mov	b,r7
      0001BD 12r00r00         [24]  947 	lcall	_strtohex
      0001C0 AE 82            [24]  948 	mov	r6,dpl
      0001C2 AF 83            [24]  949 	mov	r7,dph
                                    950 ;	main.c:87: uint8_t blockno=(t & 0xE00)>>8;
      0001C4 7C 00            [12]  951 	mov	r4,#0x00
      0001C6 74 0E            [12]  952 	mov	a,#0x0e
      0001C8 5F               [12]  953 	anl	a,r7
      0001C9 FD               [12]  954 	mov	r5,a
                                    955 ;	main.c:89: if(blockno<8)
      0001CA BD 08 00         [24]  956 	cjne	r5,#0x08,00116$
      0001CD                        957 00116$:
      0001CD 50 08            [24]  958 	jnc	00102$
                                    959 ;	main.c:92: control |=blockno;
      0001CF 90r00r02         [24]  960 	mov	dptr,#_control
      0001D2 E0               [24]  961 	movx	a,@dptr
      0001D3 4D               [12]  962 	orl	a,r5
      0001D4 F0               [24]  963 	movx	@dptr,a
      0001D5 80 09            [24]  964 	sjmp	00103$
      0001D7                        965 00102$:
                                    966 ;	main.c:99: putstr("\n\rInvalid block no.\n\r");
      0001D7 90r00r29         [24]  967 	mov	dptr,#___str_1
      0001DA 75 F0 80         [24]  968 	mov	b,#0x80
                                    969 ;	main.c:100: return;
      0001DD 02r01r14         [24]  970 	ljmp	_putstr
      0001E0                        971 00103$:
                                    972 ;	main.c:103: uint8_t address=(t&0x0FF);
                                    973 ;	main.c:106: putstr("Enter data to be written\n\r");
      0001E0 90r00r3F         [24]  974 	mov	dptr,#___str_2
      0001E3 75 F0 80         [24]  975 	mov	b,#0x80
      0001E6 C0 06            [24]  976 	push	ar6
      0001E8 12r01r14         [24]  977 	lcall	_putstr
                                    978 ;	main.c:108: gets(addressreceiver);
      0001EB 90r00r03         [24]  979 	mov	dptr,#_addressreceiver
      0001EE 75 F0 00         [24]  980 	mov	b,#0x00
      0001F1 12r00r00         [24]  981 	lcall	_gets
                                    982 ;	main.c:109: inputchecker(addressreceiver);
      0001F4 90r00r03         [24]  983 	mov	dptr,#_addressreceiver
      0001F7 75 F0 00         [24]  984 	mov	b,#0x00
      0001FA 12r00r00         [24]  985 	lcall	_inputchecker
      0001FD D0 06            [24]  986 	pop	ar6
                                    987 ;	main.c:110: if(!flag_inputcheck)
      0001FF 90r00r00         [24]  988 	mov	dptr,#_flag_inputcheck
      000202 E0               [24]  989 	movx	a,@dptr
      000203 F5 F0            [12]  990 	mov	b,a
      000205 A3               [24]  991 	inc	dptr
      000206 E0               [24]  992 	movx	a,@dptr
      000207 45 F0            [12]  993 	orl	a,b
      000209 70 3E            [24]  994 	jnz	00106$
                                    995 ;	main.c:112: putstr("data is ");
      00020B 90r00r5A         [24]  996 	mov	dptr,#___str_3
      00020E 75 F0 80         [24]  997 	mov	b,#0x80
      000211 C0 06            [24]  998 	push	ar6
      000213 12r01r14         [24]  999 	lcall	_putstr
                                   1000 ;	main.c:113: putstr(addressreceiver);
      000216 90r00r03         [24] 1001 	mov	dptr,#_addressreceiver
      000219 75 F0 00         [24] 1002 	mov	b,#0x00
      00021C 12r01r14         [24] 1003 	lcall	_putstr
                                   1004 ;	main.c:114: putstr(newl);
      00021F 90r00r63         [24] 1005 	mov	dptr,#___str_4
      000222 75 F0 80         [24] 1006 	mov	b,#0x80
      000225 12r01r14         [24] 1007 	lcall	_putstr
                                   1008 ;	main.c:115: data=strtohex(addressreceiver);
      000228 90r00r03         [24] 1009 	mov	dptr,#_addressreceiver
      00022B 75 F0 00         [24] 1010 	mov	b,#0x00
      00022E 12r00r00         [24] 1011 	lcall	_strtohex
      000231 AD 82            [24] 1012 	mov	r5,dpl
      000233 D0 06            [24] 1013 	pop	ar6
                                   1014 ;	main.c:116: byte_write(control,address,data);
      000235 90r00r02         [24] 1015 	mov	dptr,#_control
      000238 E0               [24] 1016 	movx	a,@dptr
      000239 FF               [12] 1017 	mov	r7,a
      00023A 90r00r00         [24] 1018 	mov	dptr,#_byte_write_PARM_2
      00023D EE               [12] 1019 	mov	a,r6
      00023E F0               [24] 1020 	movx	@dptr,a
      00023F 90r00r00         [24] 1021 	mov	dptr,#_byte_write_PARM_3
      000242 ED               [12] 1022 	mov	a,r5
      000243 F0               [24] 1023 	movx	@dptr,a
      000244 8F 82            [24] 1024 	mov	dpl,r7
                                   1025 ;	main.c:119: }
      000246 02r00r00         [24] 1026 	ljmp	_byte_write
      000249                       1027 00106$:
      000249 22               [24] 1028 	ret
                                   1029 ;------------------------------------------------------------
                                   1030 ;Allocation info for local variables in function 'randomread_handler'
                                   1031 ;------------------------------------------------------------
                                   1032 ;receiver                  Allocated with name '_randomread_handler_receiver_65536_110'
                                   1033 ;t                         Allocated with name '_randomread_handler_t_65536_111'
                                   1034 ;blockno                   Allocated with name '_randomread_handler_blockno_65536_111'
                                   1035 ;address                   Allocated with name '_randomread_handler_address_131072_114'
                                   1036 ;result                    Allocated with name '_randomread_handler_result_131072_114'
                                   1037 ;------------------------------------------------------------
                                   1038 ;	main.c:121: int randomread_handler(char *receiver)
                                   1039 ;	-----------------------------------------
                                   1040 ;	 function randomread_handler
                                   1041 ;	-----------------------------------------
      00024A                       1042 _randomread_handler:
      00024A AF F0            [24] 1043 	mov	r7,b
      00024C AE 83            [24] 1044 	mov	r6,dph
      00024E E5 82            [12] 1045 	mov	a,dpl
      000250 90r00r11         [24] 1046 	mov	dptr,#_randomread_handler_receiver_65536_110
      000253 F0               [24] 1047 	movx	@dptr,a
      000254 EE               [12] 1048 	mov	a,r6
      000255 A3               [24] 1049 	inc	dptr
      000256 F0               [24] 1050 	movx	@dptr,a
      000257 EF               [12] 1051 	mov	a,r7
      000258 A3               [24] 1052 	inc	dptr
      000259 F0               [24] 1053 	movx	@dptr,a
                                   1054 ;	main.c:123: uint16_t t=strtohex(receiver);
      00025A 90r00r11         [24] 1055 	mov	dptr,#_randomread_handler_receiver_65536_110
      00025D E0               [24] 1056 	movx	a,@dptr
      00025E FD               [12] 1057 	mov	r5,a
      00025F A3               [24] 1058 	inc	dptr
      000260 E0               [24] 1059 	movx	a,@dptr
      000261 FE               [12] 1060 	mov	r6,a
      000262 A3               [24] 1061 	inc	dptr
      000263 E0               [24] 1062 	movx	a,@dptr
      000264 FF               [12] 1063 	mov	r7,a
      000265 8D 82            [24] 1064 	mov	dpl,r5
      000267 8E 83            [24] 1065 	mov	dph,r6
      000269 8F F0            [24] 1066 	mov	b,r7
      00026B 12r00r00         [24] 1067 	lcall	_strtohex
      00026E AE 82            [24] 1068 	mov	r6,dpl
      000270 AF 83            [24] 1069 	mov	r7,dph
                                   1070 ;	main.c:124: uint8_t blockno=(t & 0xE00)>>8;
      000272 74 0E            [12] 1071 	mov	a,#0x0e
      000274 5F               [12] 1072 	anl	a,r7
      000275 FD               [12] 1073 	mov	r5,a
                                   1074 ;	main.c:125: if(blockno<7)
      000276 BD 07 00         [24] 1075 	cjne	r5,#0x07,00117$
      000279                       1076 00117$:
      000279 50 08            [24] 1077 	jnc	00102$
                                   1078 ;	main.c:128: control |=blockno;
      00027B 90r00r02         [24] 1079 	mov	dptr,#_control
      00027E E0               [24] 1080 	movx	a,@dptr
      00027F 4D               [12] 1081 	orl	a,r5
      000280 F0               [24] 1082 	movx	@dptr,a
      000281 80 06            [24] 1083 	sjmp	00103$
      000283                       1084 00102$:
                                   1085 ;	main.c:133: errorflag=1;
      000283 90r00r03         [24] 1086 	mov	dptr,#_errorflag
      000286 74 01            [12] 1087 	mov	a,#0x01
      000288 F0               [24] 1088 	movx	@dptr,a
      000289                       1089 00103$:
                                   1090 ;	main.c:134: if(errorflag)
      000289 90r00r03         [24] 1091 	mov	dptr,#_errorflag
      00028C E0               [24] 1092 	movx	a,@dptr
      00028D 60 0D            [24] 1093 	jz	00105$
                                   1094 ;	main.c:136: putstr("Wrong block number. \n\r");
      00028F 90r00r66         [24] 1095 	mov	dptr,#___str_5
      000292 75 F0 80         [24] 1096 	mov	b,#0x80
      000295 12r01r14         [24] 1097 	lcall	_putstr
                                   1098 ;	main.c:137: return -1;
      000298 90 FF FF         [24] 1099 	mov	dptr,#0xffff
      00029B 22               [24] 1100 	ret
      00029C                       1101 00105$:
                                   1102 ;	main.c:142: uint8_t address=(t&0x0FF);
                                   1103 ;	main.c:143: int result =random_read(control,address);
      00029C 90r00r02         [24] 1104 	mov	dptr,#_control
      00029F E0               [24] 1105 	movx	a,@dptr
      0002A0 FF               [12] 1106 	mov	r7,a
      0002A1 90r00r00         [24] 1107 	mov	dptr,#_random_read_PARM_2
      0002A4 EE               [12] 1108 	mov	a,r6
      0002A5 F0               [24] 1109 	movx	@dptr,a
      0002A6 8F 82            [24] 1110 	mov	dpl,r7
      0002A8 12r00r00         [24] 1111 	lcall	_random_read
      0002AB AE 82            [24] 1112 	mov	r6,dpl
      0002AD AF 83            [24] 1113 	mov	r7,dph
                                   1114 ;	main.c:144: errorflag=0;
      0002AF 90r00r03         [24] 1115 	mov	dptr,#_errorflag
      0002B2 E4               [12] 1116 	clr	a
      0002B3 F0               [24] 1117 	movx	@dptr,a
                                   1118 ;	main.c:145: return result;
      0002B4 8E 82            [24] 1119 	mov	dpl,r6
      0002B6 8F 83            [24] 1120 	mov	dph,r7
                                   1121 ;	main.c:148: }
      0002B8 22               [24] 1122 	ret
                                   1123 ;------------------------------------------------------------
                                   1124 ;Allocation info for local variables in function 'main'
                                   1125 ;------------------------------------------------------------
                                   1126 ;addressreceiver1          Allocated with name '_main_addressreceiver1_196609_120'
                                   1127 ;address1                  Allocated with name '_main_address1_196610_122'
                                   1128 ;block1                    Allocated with name '_main_block1_196610_122'
                                   1129 ;startaddress              Allocated with name '_main_startaddress_196610_122'
                                   1130 ;addressreceiver2          Allocated with name '_main_addressreceiver2_196610_122'
                                   1131 ;address2                  Allocated with name '_main_address2_196611_124'
                                   1132 ;block2                    Allocated with name '_main_block2_196611_124'
                                   1133 ;endaddress                Allocated with name '_main_endaddress_196611_124'
                                   1134 ;------------------------------------------------------------
                                   1135 ;	main.c:150: void main(void)
                                   1136 ;	-----------------------------------------
                                   1137 ;	 function main
                                   1138 ;	-----------------------------------------
      0002B9                       1139 _main:
                                   1140 ;	main.c:152: i2c_reset();
      0002B9 12r00r00         [24] 1141 	lcall	_i2c_reset
                                   1142 ;	main.c:153: while(1)
      0002BC                       1143 00123$:
                                   1144 ;	main.c:157: errorflag=0;
      0002BC 90r00r03         [24] 1145 	mov	dptr,#_errorflag
      0002BF E4               [12] 1146 	clr	a
      0002C0 F0               [24] 1147 	movx	@dptr,a
                                   1148 ;	main.c:158: putstr("*****************\n\rMENU FOR TESTING I2C FUNCTIONS\n\rPRESS W FOR WRITE BYTE\n\rPRESS R FOR RANDOM READ\n\rPRESS S FOR HEX DUMP\n\r\n\rPRESS X FOR EEPROM RESET\n\r");
      0002C1 90r00r7D         [24] 1149 	mov	dptr,#___str_6
      0002C4 75 F0 80         [24] 1150 	mov	b,#0x80
      0002C7 12r01r14         [24] 1151 	lcall	_putstr
                                   1152 ;	main.c:159: menuselect=getchar();
      0002CA 12r00rFE         [24] 1153 	lcall	_getchar
      0002CD AE 82            [24] 1154 	mov	r6,dpl
      0002CF AF 83            [24] 1155 	mov	r7,dph
      0002D1 90r00r0C         [24] 1156 	mov	dptr,#_menuselect
      0002D4 EE               [12] 1157 	mov	a,r6
      0002D5 F0               [24] 1158 	movx	@dptr,a
      0002D6 EF               [12] 1159 	mov	a,r7
      0002D7 A3               [24] 1160 	inc	dptr
      0002D8 F0               [24] 1161 	movx	@dptr,a
                                   1162 ;	main.c:161: putchar(menuselect);
      0002D9 8E 82            [24] 1163 	mov	dpl,r6
      0002DB 8F 83            [24] 1164 	mov	dph,r7
      0002DD 12r00rD9         [24] 1165 	lcall	_putchar
                                   1166 ;	main.c:162: putstr("\n\r");
      0002E0 90r00r63         [24] 1167 	mov	dptr,#___str_4
      0002E3 75 F0 80         [24] 1168 	mov	b,#0x80
      0002E6 12r01r14         [24] 1169 	lcall	_putstr
                                   1170 ;	main.c:164: switch(toupper(menuselect))
      0002E9 90r00r0C         [24] 1171 	mov	dptr,#_menuselect
      0002EC E0               [24] 1172 	movx	a,@dptr
      0002ED FE               [12] 1173 	mov	r6,a
      0002EE A3               [24] 1174 	inc	dptr
      0002EF E0               [24] 1175 	movx	a,@dptr
      0002F0 FF               [12] 1176 	mov	r7,a
      0002F1 8E 82            [24] 1177 	mov	dpl,r6
      0002F3 8F 83            [24] 1178 	mov	dph,r7
      0002F5 12r00r00         [24] 1179 	lcall	_toupper
      0002F8 AE 82            [24] 1180 	mov	r6,dpl
      0002FA AF 83            [24] 1181 	mov	r7,dph
      0002FC BE 52 05         [24] 1182 	cjne	r6,#0x52,00175$
      0002FF BF 00 02         [24] 1183 	cjne	r7,#0x00,00175$
      000302 80 55            [24] 1184 	sjmp	00104$
      000304                       1185 00175$:
      000304 BE 53 06         [24] 1186 	cjne	r6,#0x53,00176$
      000307 BF 00 03         [24] 1187 	cjne	r7,#0x00,00176$
      00030A 02r03rC0         [24] 1188 	ljmp	00109$
      00030D                       1189 00176$:
      00030D BE 57 05         [24] 1190 	cjne	r6,#0x57,00177$
      000310 BF 00 02         [24] 1191 	cjne	r7,#0x00,00177$
      000313 80 0C            [24] 1192 	sjmp	00101$
      000315                       1193 00177$:
      000315 BE 58 06         [24] 1194 	cjne	r6,#0x58,00178$
      000318 BF 00 03         [24] 1195 	cjne	r7,#0x00,00178$
      00031B 02r04rE3         [24] 1196 	ljmp	00119$
      00031E                       1197 00178$:
      00031E 02r04rF8         [24] 1198 	ljmp	00120$
                                   1199 ;	main.c:167: case 'W':
      000321                       1200 00101$:
                                   1201 ;	main.c:168: putstr("ENTER ADDRESS TO BE WRITTEN ,ADDRESS INCLUDES BLOCK NUMBER AND WORD ADRRESS TOGETHER IN HEX\n\r");
      000321 90r01r14         [24] 1202 	mov	dptr,#___str_7
      000324 75 F0 80         [24] 1203 	mov	b,#0x80
      000327 12r01r14         [24] 1204 	lcall	_putstr
                                   1205 ;	main.c:170: gets(addressreceiver);
      00032A 90r00r03         [24] 1206 	mov	dptr,#_addressreceiver
      00032D 75 F0 00         [24] 1207 	mov	b,#0x00
      000330 12r00r00         [24] 1208 	lcall	_gets
                                   1209 ;	main.c:171: inputchecker(addressreceiver);
      000333 90r00r03         [24] 1210 	mov	dptr,#_addressreceiver
      000336 75 F0 00         [24] 1211 	mov	b,#0x00
      000339 12r00r00         [24] 1212 	lcall	_inputchecker
                                   1213 ;	main.c:172: if(!flag_inputcheck)
      00033C 90r00r00         [24] 1214 	mov	dptr,#_flag_inputcheck
      00033F E0               [24] 1215 	movx	a,@dptr
      000340 F5 F0            [12] 1216 	mov	b,a
      000342 A3               [24] 1217 	inc	dptr
      000343 E0               [24] 1218 	movx	a,@dptr
      000344 45 F0            [12] 1219 	orl	a,b
                                   1220 ;	main.c:173: writebytehandler(addressreceiver);
      000346 70 08            [24] 1221 	jnz	00103$
      000348 90r00r03         [24] 1222 	mov	dptr,#_addressreceiver
      00034B F5 F0            [12] 1223 	mov	b,a
      00034D 12r01r9C         [24] 1224 	lcall	_writebytehandler
      000350                       1225 00103$:
                                   1226 ;	main.c:174: control=0xA0;
      000350 90r00r02         [24] 1227 	mov	dptr,#_control
      000353 74 A0            [12] 1228 	mov	a,#0xa0
      000355 F0               [24] 1229 	movx	@dptr,a
                                   1230 ;	main.c:175: break;
      000356 02r02rBC         [24] 1231 	ljmp	00123$
                                   1232 ;	main.c:177: case 'R':
      000359                       1233 00104$:
                                   1234 ;	main.c:178: putstr("ENTER ADDRESS TO BE READ,ADDRESS INCLUDES BLOCK NUMBER AND WORD ADRRESS TOGETHER SEPERATED  in HEX\n\r");
      000359 90r01r72         [24] 1235 	mov	dptr,#___str_8
      00035C 75 F0 80         [24] 1236 	mov	b,#0x80
      00035F 12r01r14         [24] 1237 	lcall	_putstr
                                   1238 ;	main.c:179: gets(addressreceiver);
      000362 90r00r03         [24] 1239 	mov	dptr,#_addressreceiver
      000365 75 F0 00         [24] 1240 	mov	b,#0x00
      000368 12r00r00         [24] 1241 	lcall	_gets
                                   1242 ;	main.c:180: inputchecker(addressreceiver);
      00036B 90r00r03         [24] 1243 	mov	dptr,#_addressreceiver
      00036E 75 F0 00         [24] 1244 	mov	b,#0x00
      000371 12r00r00         [24] 1245 	lcall	_inputchecker
                                   1246 ;	main.c:181: if(!flag_inputcheck)
      000374 90r00r00         [24] 1247 	mov	dptr,#_flag_inputcheck
      000377 E0               [24] 1248 	movx	a,@dptr
      000378 F5 F0            [12] 1249 	mov	b,a
      00037A A3               [24] 1250 	inc	dptr
      00037B E0               [24] 1251 	movx	a,@dptr
      00037C 45 F0            [12] 1252 	orl	a,b
                                   1253 ;	main.c:184: output=randomread_handler(addressreceiver);
      00037E 70 37            [24] 1254 	jnz	00108$
      000380 90r00r03         [24] 1255 	mov	dptr,#_addressreceiver
      000383 F5 F0            [12] 1256 	mov	b,a
      000385 12r02r4A         [24] 1257 	lcall	_randomread_handler
      000388 AE 82            [24] 1258 	mov	r6,dpl
      00038A AF 83            [24] 1259 	mov	r7,dph
      00038C 90r00r14         [24] 1260 	mov	dptr,#_output
      00038F EE               [12] 1261 	mov	a,r6
      000390 F0               [24] 1262 	movx	@dptr,a
                                   1263 ;	main.c:185: if(errorflag==0)
      000391 90r00r03         [24] 1264 	mov	dptr,#_errorflag
      000394 E0               [24] 1265 	movx	a,@dptr
      000395 70 20            [24] 1266 	jnz	00108$
                                   1267 ;	main.c:186: printf("Read value is 0x%X\n\r",output);
      000397 90r00r14         [24] 1268 	mov	dptr,#_output
      00039A E0               [24] 1269 	movx	a,@dptr
      00039B FF               [12] 1270 	mov	r7,a
      00039C 7E 00            [12] 1271 	mov	r6,#0x00
      00039E C0 07            [24] 1272 	push	ar7
      0003A0 C0 06            [24] 1273 	push	ar6
      0003A2 74rD7            [12] 1274 	mov	a,#___str_9
      0003A4 C0 E0            [24] 1275 	push	acc
      0003A6 74s01            [12] 1276 	mov	a,#(___str_9 >> 8)
      0003A8 C0 E0            [24] 1277 	push	acc
      0003AA 74 80            [12] 1278 	mov	a,#0x80
      0003AC C0 E0            [24] 1279 	push	acc
      0003AE 12r00r00         [24] 1280 	lcall	_printf
      0003B1 E5 81            [12] 1281 	mov	a,sp
      0003B3 24 FB            [12] 1282 	add	a,#0xfb
      0003B5 F5 81            [12] 1283 	mov	sp,a
      0003B7                       1284 00108$:
                                   1285 ;	main.c:188: control=0xA0;
      0003B7 90r00r02         [24] 1286 	mov	dptr,#_control
      0003BA 74 A0            [12] 1287 	mov	a,#0xa0
      0003BC F0               [24] 1288 	movx	@dptr,a
                                   1289 ;	main.c:190: break;
      0003BD 02r02rBC         [24] 1290 	ljmp	00123$
                                   1291 ;	main.c:191: case 'S':
      0003C0                       1292 00109$:
                                   1293 ;	main.c:192: putstr("ENTER ADDRESS TO BE READ,ADDRESS INCLUDES BLOCK NUMBER AND WORD ADRRESS TOGETHER SEPERATED BY 0 in HEX\n\r");
      0003C0 90r01rEC         [24] 1294 	mov	dptr,#___str_10
      0003C3 75 F0 80         [24] 1295 	mov	b,#0x80
      0003C6 12r01r14         [24] 1296 	lcall	_putstr
                                   1297 ;	main.c:195: putstr("Enter first address\n\r");
      0003C9 90r02r55         [24] 1298 	mov	dptr,#___str_11
      0003CC 75 F0 80         [24] 1299 	mov	b,#0x80
      0003CF 12r01r14         [24] 1300 	lcall	_putstr
                                   1301 ;	main.c:196: gets(addressreceiver1);
      0003D2 90r00r15         [24] 1302 	mov	dptr,#_main_addressreceiver1_196609_120
      0003D5 75 F0 00         [24] 1303 	mov	b,#0x00
      0003D8 12r00r00         [24] 1304 	lcall	_gets
                                   1305 ;	main.c:197: inputchecker(addressreceiver1);
      0003DB 90r00r15         [24] 1306 	mov	dptr,#_main_addressreceiver1_196609_120
      0003DE 75 F0 00         [24] 1307 	mov	b,#0x00
      0003E1 12r00r00         [24] 1308 	lcall	_inputchecker
                                   1309 ;	main.c:198: if(flag_inputcheck)
      0003E4 90r00r00         [24] 1310 	mov	dptr,#_flag_inputcheck
      0003E7 E0               [24] 1311 	movx	a,@dptr
      0003E8 F5 F0            [12] 1312 	mov	b,a
      0003EA A3               [24] 1313 	inc	dptr
      0003EB E0               [24] 1314 	movx	a,@dptr
      0003EC 45 F0            [12] 1315 	orl	a,b
      0003EE 60 15            [24] 1316 	jz	00111$
                                   1317 ;	main.c:200: putstr("Error in input");
      0003F0 90r02r6B         [24] 1318 	mov	dptr,#___str_12
      0003F3 75 F0 80         [24] 1319 	mov	b,#0x80
      0003F6 12r01r14         [24] 1320 	lcall	_putstr
                                   1321 ;	main.c:201: putstr(newl);
      0003F9 90r00r63         [24] 1322 	mov	dptr,#___str_4
      0003FC 75 F0 80         [24] 1323 	mov	b,#0x80
      0003FF 12r01r14         [24] 1324 	lcall	_putstr
                                   1325 ;	main.c:202: break;
      000402 02r02rBC         [24] 1326 	ljmp	00123$
      000405                       1327 00111$:
                                   1328 ;	main.c:206: uint16_t address1=strtohex(addressreceiver1);
      000405 90r00r15         [24] 1329 	mov	dptr,#_main_addressreceiver1_196609_120
      000408 75 F0 00         [24] 1330 	mov	b,#0x00
      00040B 12r00r00         [24] 1331 	lcall	_strtohex
      00040E AE 82            [24] 1332 	mov	r6,dpl
      000410 AF 83            [24] 1333 	mov	r7,dph
                                   1334 ;	main.c:208: uint8_t block1=(address1 & 0xE00)>>8;
      000412 74 0E            [12] 1335 	mov	a,#0x0e
      000414 5F               [12] 1336 	anl	a,r7
      000415 FD               [12] 1337 	mov	r5,a
                                   1338 ;	main.c:209: uint8_t startaddress=(address1&0x0FF);
      000416 8E 04            [24] 1339 	mov	ar4,r6
                                   1340 ;	main.c:214: putstr("Enter second address\n\r");
      000418 90r02r7A         [24] 1341 	mov	dptr,#___str_13
      00041B 75 F0 80         [24] 1342 	mov	b,#0x80
      00041E C0 07            [24] 1343 	push	ar7
      000420 C0 06            [24] 1344 	push	ar6
      000422 C0 05            [24] 1345 	push	ar5
      000424 C0 04            [24] 1346 	push	ar4
      000426 12r01r14         [24] 1347 	lcall	_putstr
                                   1348 ;	main.c:215: gets(addressreceiver2);
      000429 90r00r19         [24] 1349 	mov	dptr,#_main_addressreceiver2_196610_122
      00042C 75 F0 00         [24] 1350 	mov	b,#0x00
      00042F 12r00r00         [24] 1351 	lcall	_gets
                                   1352 ;	main.c:216: inputchecker(addressreceiver2);
      000432 90r00r19         [24] 1353 	mov	dptr,#_main_addressreceiver2_196610_122
      000435 75 F0 00         [24] 1354 	mov	b,#0x00
      000438 12r00r00         [24] 1355 	lcall	_inputchecker
      00043B D0 04            [24] 1356 	pop	ar4
      00043D D0 05            [24] 1357 	pop	ar5
      00043F D0 06            [24] 1358 	pop	ar6
      000441 D0 07            [24] 1359 	pop	ar7
                                   1360 ;	main.c:217: if(flag_inputcheck)
      000443 90r00r00         [24] 1361 	mov	dptr,#_flag_inputcheck
      000446 E0               [24] 1362 	movx	a,@dptr
      000447 F5 F0            [12] 1363 	mov	b,a
      000449 A3               [24] 1364 	inc	dptr
      00044A E0               [24] 1365 	movx	a,@dptr
      00044B 45 F0            [12] 1366 	orl	a,b
      00044D 60 15            [24] 1367 	jz	00113$
                                   1368 ;	main.c:219: putstr("Error in input");
      00044F 90r02r6B         [24] 1369 	mov	dptr,#___str_12
      000452 75 F0 80         [24] 1370 	mov	b,#0x80
      000455 12r01r14         [24] 1371 	lcall	_putstr
                                   1372 ;	main.c:220: putstr(newl);
      000458 90r00r63         [24] 1373 	mov	dptr,#___str_4
      00045B 75 F0 80         [24] 1374 	mov	b,#0x80
      00045E 12r01r14         [24] 1375 	lcall	_putstr
                                   1376 ;	main.c:221: break;
      000461 02r02rBC         [24] 1377 	ljmp	00123$
      000464                       1378 00113$:
                                   1379 ;	main.c:225: uint16_t address2=strtohex(addressreceiver2);
      000464 90r00r19         [24] 1380 	mov	dptr,#_main_addressreceiver2_196610_122
      000467 75 F0 00         [24] 1381 	mov	b,#0x00
      00046A C0 07            [24] 1382 	push	ar7
      00046C C0 06            [24] 1383 	push	ar6
      00046E C0 05            [24] 1384 	push	ar5
      000470 C0 04            [24] 1385 	push	ar4
      000472 12r00r00         [24] 1386 	lcall	_strtohex
      000475 AA 82            [24] 1387 	mov	r2,dpl
      000477 AB 83            [24] 1388 	mov	r3,dph
      000479 D0 04            [24] 1389 	pop	ar4
      00047B D0 05            [24] 1390 	pop	ar5
      00047D D0 06            [24] 1391 	pop	ar6
      00047F D0 07            [24] 1392 	pop	ar7
                                   1393 ;	main.c:226: uint8_t block2=(address2 & 0xE00)>>8;
      000481 74 0E            [12] 1394 	mov	a,#0x0e
      000483 5B               [12] 1395 	anl	a,r3
      000484 F9               [12] 1396 	mov	r1,a
                                   1397 ;	main.c:227: uint8_t endaddress=(address2&0x0FF);
      000485 8A 00            [24] 1398 	mov	ar0,r2
                                   1399 ;	main.c:229: if(block1>7 || block2>7)
      000487 ED               [12] 1400 	mov	a,r5
      000488 24 F8            [12] 1401 	add	a,#0xff - 0x07
      00048A 40 05            [24] 1402 	jc	00114$
      00048C E9               [12] 1403 	mov	a,r1
      00048D 24 F8            [12] 1404 	add	a,#0xff - 0x07
      00048F 50 0C            [24] 1405 	jnc	00115$
      000491                       1406 00114$:
                                   1407 ;	main.c:232: putstr("Block numbers are invalid\n\r");
      000491 90r02r91         [24] 1408 	mov	dptr,#___str_14
      000494 75 F0 80         [24] 1409 	mov	b,#0x80
      000497 12r01r14         [24] 1410 	lcall	_putstr
                                   1411 ;	main.c:233: break;
      00049A 02r02rBC         [24] 1412 	ljmp	00123$
      00049D                       1413 00115$:
                                   1414 ;	main.c:235: if(address1>address2)
      00049D C3               [12] 1415 	clr	c
      00049E EA               [12] 1416 	mov	a,r2
      00049F 9E               [12] 1417 	subb	a,r6
      0004A0 EB               [12] 1418 	mov	a,r3
      0004A1 9F               [12] 1419 	subb	a,r7
      0004A2 50 18            [24] 1420 	jnc	00118$
                                   1421 ;	main.c:237: printf("Initial address is greater than Second address\n\r");
      0004A4 74rAD            [12] 1422 	mov	a,#___str_15
      0004A6 C0 E0            [24] 1423 	push	acc
      0004A8 74s02            [12] 1424 	mov	a,#(___str_15 >> 8)
      0004AA C0 E0            [24] 1425 	push	acc
      0004AC 74 80            [12] 1426 	mov	a,#0x80
      0004AE C0 E0            [24] 1427 	push	acc
      0004B0 12r00r00         [24] 1428 	lcall	_printf
      0004B3 15 81            [12] 1429 	dec	sp
      0004B5 15 81            [12] 1430 	dec	sp
      0004B7 15 81            [12] 1431 	dec	sp
                                   1432 ;	main.c:238: break;
      0004B9 02r02rBC         [24] 1433 	ljmp	00123$
      0004BC                       1434 00118$:
                                   1435 ;	main.c:244: seq_read(control,startaddress,endaddress,block1,block2);
      0004BC 90r00r02         [24] 1436 	mov	dptr,#_control
      0004BF E0               [24] 1437 	movx	a,@dptr
      0004C0 FF               [12] 1438 	mov	r7,a
      0004C1 90r00r00         [24] 1439 	mov	dptr,#_seq_read_PARM_2
      0004C4 EC               [12] 1440 	mov	a,r4
      0004C5 F0               [24] 1441 	movx	@dptr,a
      0004C6 90r00r00         [24] 1442 	mov	dptr,#_seq_read_PARM_3
      0004C9 E8               [12] 1443 	mov	a,r0
      0004CA F0               [24] 1444 	movx	@dptr,a
      0004CB 90r00r00         [24] 1445 	mov	dptr,#_seq_read_PARM_4
      0004CE ED               [12] 1446 	mov	a,r5
      0004CF F0               [24] 1447 	movx	@dptr,a
      0004D0 90r00r00         [24] 1448 	mov	dptr,#_seq_read_PARM_5
      0004D3 E9               [12] 1449 	mov	a,r1
      0004D4 F0               [24] 1450 	movx	@dptr,a
      0004D5 8F 82            [24] 1451 	mov	dpl,r7
      0004D7 12r00r00         [24] 1452 	lcall	_seq_read
                                   1453 ;	main.c:250: control=0xA0;
      0004DA 90r00r02         [24] 1454 	mov	dptr,#_control
      0004DD 74 A0            [12] 1455 	mov	a,#0xa0
      0004DF F0               [24] 1456 	movx	@dptr,a
                                   1457 ;	main.c:252: break;
      0004E0 02r02rBC         [24] 1458 	ljmp	00123$
                                   1459 ;	main.c:253: case 'X':
      0004E3                       1460 00119$:
                                   1461 ;	main.c:254: restart_i2c();
      0004E3 12r00r00         [24] 1462 	lcall	_restart_i2c
                                   1463 ;	main.c:255: i2c_write(0xFF);
      0004E6 90 00 FF         [24] 1464 	mov	dptr,#0x00ff
      0004E9 12r00r00         [24] 1465 	lcall	_i2c_write
                                   1466 ;	main.c:256: i2c_nack();
      0004EC 12r00r00         [24] 1467 	lcall	_i2c_nack
                                   1468 ;	main.c:257: restart_i2c();
      0004EF 12r00r00         [24] 1469 	lcall	_restart_i2c
                                   1470 ;	main.c:258: i2c_stop();
      0004F2 12r00r00         [24] 1471 	lcall	_i2c_stop
                                   1472 ;	main.c:259: break;
      0004F5 02r02rBC         [24] 1473 	ljmp	00123$
                                   1474 ;	main.c:260: default:
      0004F8                       1475 00120$:
                                   1476 ;	main.c:261: printf("No function attached to input\r\n");
      0004F8 74rDE            [12] 1477 	mov	a,#___str_16
      0004FA C0 E0            [24] 1478 	push	acc
      0004FC 74s02            [12] 1479 	mov	a,#(___str_16 >> 8)
      0004FE C0 E0            [24] 1480 	push	acc
      000500 74 80            [12] 1481 	mov	a,#0x80
      000502 C0 E0            [24] 1482 	push	acc
      000504 12r00r00         [24] 1483 	lcall	_printf
      000507 15 81            [12] 1484 	dec	sp
      000509 15 81            [12] 1485 	dec	sp
      00050B 15 81            [12] 1486 	dec	sp
                                   1487 ;	main.c:274: }
                                   1488 ;	main.c:278: }
      00050D 02r02rBC         [24] 1489 	ljmp	00123$
                                   1490 	.area CSEG    (CODE)
                                   1491 	.area CONST   (CODE)
                                   1492 	.area CONST   (CODE)
      000000                       1493 ___str_0:
      000000 49 6E 76 61 6C 69 64  1494 	.ascii "Invalid character entered Please retry"
             20 63 68 61 72 61 63
             74 65 72 20 65 6E 74
             65 72 65 64 20 50 6C
             65 61 73 65 20 72 65
             74 72 79
      000026 0A                    1495 	.db 0x0a
      000027 0D                    1496 	.db 0x0d
      000028 00                    1497 	.db 0x00
                                   1498 	.area CSEG    (CODE)
                                   1499 	.area CONST   (CODE)
      000029                       1500 ___str_1:
      000029 0A                    1501 	.db 0x0a
      00002A 0D                    1502 	.db 0x0d
      00002B 49 6E 76 61 6C 69 64  1503 	.ascii "Invalid block no."
             20 62 6C 6F 63 6B 20
             6E 6F 2E
      00003C 0A                    1504 	.db 0x0a
      00003D 0D                    1505 	.db 0x0d
      00003E 00                    1506 	.db 0x00
                                   1507 	.area CSEG    (CODE)
                                   1508 	.area CONST   (CODE)
      00003F                       1509 ___str_2:
      00003F 45 6E 74 65 72 20 64  1510 	.ascii "Enter data to be written"
             61 74 61 20 74 6F 20
             62 65 20 77 72 69 74
             74 65 6E
      000057 0A                    1511 	.db 0x0a
      000058 0D                    1512 	.db 0x0d
      000059 00                    1513 	.db 0x00
                                   1514 	.area CSEG    (CODE)
                                   1515 	.area CONST   (CODE)
      00005A                       1516 ___str_3:
      00005A 64 61 74 61 20 69 73  1517 	.ascii "data is "
             20
      000062 00                    1518 	.db 0x00
                                   1519 	.area CSEG    (CODE)
                                   1520 	.area CONST   (CODE)
      000063                       1521 ___str_4:
      000063 0A                    1522 	.db 0x0a
      000064 0D                    1523 	.db 0x0d
      000065 00                    1524 	.db 0x00
                                   1525 	.area CSEG    (CODE)
                                   1526 	.area CONST   (CODE)
      000066                       1527 ___str_5:
      000066 57 72 6F 6E 67 20 62  1528 	.ascii "Wrong block number. "
             6C 6F 63 6B 20 6E 75
             6D 62 65 72 2E 20
      00007A 0A                    1529 	.db 0x0a
      00007B 0D                    1530 	.db 0x0d
      00007C 00                    1531 	.db 0x00
                                   1532 	.area CSEG    (CODE)
                                   1533 	.area CONST   (CODE)
      00007D                       1534 ___str_6:
      00007D 2A 2A 2A 2A 2A 2A 2A  1535 	.ascii "*****************"
             2A 2A 2A 2A 2A 2A 2A
             2A 2A 2A
      00008E 0A                    1536 	.db 0x0a
      00008F 0D                    1537 	.db 0x0d
      000090 4D 45 4E 55 20 46 4F  1538 	.ascii "MENU FOR TESTING I2C FUNCTIONS"
             52 20 54 45 53 54 49
             4E 47 20 49 32 43 20
             46 55 4E 43 54 49 4F
             4E 53
      0000AE 0A                    1539 	.db 0x0a
      0000AF 0D                    1540 	.db 0x0d
      0000B0 50 52 45 53 53 20 57  1541 	.ascii "PRESS W FOR WRITE BYTE"
             20 46 4F 52 20 57 52
             49 54 45 20 42 59 54
             45
      0000C6 0A                    1542 	.db 0x0a
      0000C7 0D                    1543 	.db 0x0d
      0000C8 50 52 45 53 53 20 52  1544 	.ascii "PRESS R FOR RANDOM READ"
             20 46 4F 52 20 52 41
             4E 44 4F 4D 20 52 45
             41 44
      0000DF 0A                    1545 	.db 0x0a
      0000E0 0D                    1546 	.db 0x0d
      0000E1 50 52 45 53 53 20 53  1547 	.ascii "PRESS S FOR HEX DUMP"
             20 46 4F 52 20 48 45
             58 20 44 55 4D 50
      0000F5 0A                    1548 	.db 0x0a
      0000F6 0D                    1549 	.db 0x0d
      0000F7 0A                    1550 	.db 0x0a
      0000F8 0D                    1551 	.db 0x0d
      0000F9 50 52 45 53 53 20 58  1552 	.ascii "PRESS X FOR EEPROM RESET"
             20 46 4F 52 20 45 45
             50 52 4F 4D 20 52 45
             53 45 54
      000111 0A                    1553 	.db 0x0a
      000112 0D                    1554 	.db 0x0d
      000113 00                    1555 	.db 0x00
                                   1556 	.area CSEG    (CODE)
                                   1557 	.area CONST   (CODE)
      000114                       1558 ___str_7:
      000114 45 4E 54 45 52 20 41  1559 	.ascii "ENTER ADDRESS TO BE WRITTEN ,ADDRESS INCLUDES BLOCK NUMBER A"
             44 44 52 45 53 53 20
             54 4F 20 42 45 20 57
             52 49 54 54 45 4E 20
             2C 41 44 44 52 45 53
             53 20 49 4E 43 4C 55
             44 45 53 20 42 4C 4F
             43 4B 20 4E 55 4D 42
             45 52 20 41
      000150 4E 44 20 57 4F 52 44  1560 	.ascii "ND WORD ADRRESS TOGETHER IN HEX"
             20 41 44 52 52 45 53
             53 20 54 4F 47 45 54
             48 45 52 20 49 4E 20
             48 45 58
      00016F 0A                    1561 	.db 0x0a
      000170 0D                    1562 	.db 0x0d
      000171 00                    1563 	.db 0x00
                                   1564 	.area CSEG    (CODE)
                                   1565 	.area CONST   (CODE)
      000172                       1566 ___str_8:
      000172 45 4E 54 45 52 20 41  1567 	.ascii "ENTER ADDRESS TO BE READ,ADDRESS INCLUDES BLOCK NUMBER AND W"
             44 44 52 45 53 53 20
             54 4F 20 42 45 20 52
             45 41 44 2C 41 44 44
             52 45 53 53 20 49 4E
             43 4C 55 44 45 53 20
             42 4C 4F 43 4B 20 4E
             55 4D 42 45 52 20 41
             4E 44 20 57
      0001AE 4F 52 44 20 41 44 52  1568 	.ascii "ORD ADRRESS TOGETHER SEPERATED  in HEX"
             52 45 53 53 20 54 4F
             47 45 54 48 45 52 20
             53 45 50 45 52 41 54
             45 44 20 20 69 6E 20
             48 45 58
      0001D4 0A                    1569 	.db 0x0a
      0001D5 0D                    1570 	.db 0x0d
      0001D6 00                    1571 	.db 0x00
                                   1572 	.area CSEG    (CODE)
                                   1573 	.area CONST   (CODE)
      0001D7                       1574 ___str_9:
      0001D7 52 65 61 64 20 76 61  1575 	.ascii "Read value is 0x%X"
             6C 75 65 20 69 73 20
             30 78 25 58
      0001E9 0A                    1576 	.db 0x0a
      0001EA 0D                    1577 	.db 0x0d
      0001EB 00                    1578 	.db 0x00
                                   1579 	.area CSEG    (CODE)
                                   1580 	.area CONST   (CODE)
      0001EC                       1581 ___str_10:
      0001EC 45 4E 54 45 52 20 41  1582 	.ascii "ENTER ADDRESS TO BE READ,ADDRESS INCLUDES BLOCK NUMBER AND W"
             44 44 52 45 53 53 20
             54 4F 20 42 45 20 52
             45 41 44 2C 41 44 44
             52 45 53 53 20 49 4E
             43 4C 55 44 45 53 20
             42 4C 4F 43 4B 20 4E
             55 4D 42 45 52 20 41
             4E 44 20 57
      000228 4F 52 44 20 41 44 52  1583 	.ascii "ORD ADRRESS TOGETHER SEPERATED BY 0 in HEX"
             52 45 53 53 20 54 4F
             47 45 54 48 45 52 20
             53 45 50 45 52 41 54
             45 44 20 42 59 20 30
             20 69 6E 20 48 45 58
      000252 0A                    1584 	.db 0x0a
      000253 0D                    1585 	.db 0x0d
      000254 00                    1586 	.db 0x00
                                   1587 	.area CSEG    (CODE)
                                   1588 	.area CONST   (CODE)
      000255                       1589 ___str_11:
      000255 45 6E 74 65 72 20 66  1590 	.ascii "Enter first address"
             69 72 73 74 20 61 64
             64 72 65 73 73
      000268 0A                    1591 	.db 0x0a
      000269 0D                    1592 	.db 0x0d
      00026A 00                    1593 	.db 0x00
                                   1594 	.area CSEG    (CODE)
                                   1595 	.area CONST   (CODE)
      00026B                       1596 ___str_12:
      00026B 45 72 72 6F 72 20 69  1597 	.ascii "Error in input"
             6E 20 69 6E 70 75 74
      000279 00                    1598 	.db 0x00
                                   1599 	.area CSEG    (CODE)
                                   1600 	.area CONST   (CODE)
      00027A                       1601 ___str_13:
      00027A 45 6E 74 65 72 20 73  1602 	.ascii "Enter second address"
             65 63 6F 6E 64 20 61
             64 64 72 65 73 73
      00028E 0A                    1603 	.db 0x0a
      00028F 0D                    1604 	.db 0x0d
      000290 00                    1605 	.db 0x00
                                   1606 	.area CSEG    (CODE)
                                   1607 	.area CONST   (CODE)
      000291                       1608 ___str_14:
      000291 42 6C 6F 63 6B 20 6E  1609 	.ascii "Block numbers are invalid"
             75 6D 62 65 72 73 20
             61 72 65 20 69 6E 76
             61 6C 69 64
      0002AA 0A                    1610 	.db 0x0a
      0002AB 0D                    1611 	.db 0x0d
      0002AC 00                    1612 	.db 0x00
                                   1613 	.area CSEG    (CODE)
                                   1614 	.area CONST   (CODE)
      0002AD                       1615 ___str_15:
      0002AD 49 6E 69 74 69 61 6C  1616 	.ascii "Initial address is greater than Second address"
             20 61 64 64 72 65 73
             73 20 69 73 20 67 72
             65 61 74 65 72 20 74
             68 61 6E 20 53 65 63
             6F 6E 64 20 61 64 64
             72 65 73 73
      0002DB 0A                    1617 	.db 0x0a
      0002DC 0D                    1618 	.db 0x0d
      0002DD 00                    1619 	.db 0x00
                                   1620 	.area CSEG    (CODE)
                                   1621 	.area CONST   (CODE)
      0002DE                       1622 ___str_16:
      0002DE 4E 6F 20 66 75 6E 63  1623 	.ascii "No function attached to input"
             74 69 6F 6E 20 61 74
             74 61 63 68 65 64 20
             74 6F 20 69 6E 70 75
             74
      0002FB 0D                    1624 	.db 0x0d
      0002FC 0A                    1625 	.db 0x0a
      0002FD 00                    1626 	.db 0x00
                                   1627 	.area CSEG    (CODE)
                                   1628 	.area XINIT   (CODE)
      000000                       1629 __xinit__flag_inputcheck:
      000000 00 00                 1630 	.byte #0x00, #0x00	;  0
      000002                       1631 __xinit__control:
      000002 A0                    1632 	.db #0xa0	; 160
      000003                       1633 __xinit__errorflag:
      000003 00                    1634 	.db #0x00	; 0
                                   1635 	.area CABS    (ABS,CODE)
